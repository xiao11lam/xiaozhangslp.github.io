<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>Speech Deep Learning Project Deployment</title>
    <link href="/2022/05/08/Speech-Deep-Learning-Project-Deployment/"/>
    <url>/2022/05/08/Speech-Deep-Learning-Project-Deployment/</url>
    
    <content type="html"><![CDATA[<p>Thanks to <a href="https://www.youtube.com/channel/UCZPFjMe1uRSirmSpznqvJfQ">Valerio Velardo</a> about his tutorials for deploying this project.</p><h1 id="Introduction"><a href="#Introduction" class="headerlink" title="Introduction"></a>Introduction</h1><p>We will write a “Client.py” file, which is to enable us to send a request to the server, and send the audio file in it, to retreive the text output. We are using the Tensorflow to train the NLP model. And the front end </p><h1 id="Start-the-project"><a href="#Start-the-project" class="headerlink" title="Start the project"></a>Start the project</h1><h2 id="1-Preparing-the-Speech-Dataset-prepare-data-py"><a href="#1-Preparing-the-Speech-Dataset-prepare-data-py" class="headerlink" title="1. Preparing the Speech Dataset (prepare_data.py)"></a>1. Preparing the Speech Dataset (prepare_data.py)</h2><p>The most significant part of the is to align the text and the trained corpora. Here are the data we need to extract from here, and we just store it in the JSON form.</p><figure class="highlight prolog"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></div></td><td class="code"><pre><code class="hljs prolog"><span class="hljs-string">&quot;mappings&quot;</span>:[<span class="hljs-string">&quot;on&quot;</span>, <span class="hljs-string">&quot;off&quot;</span>, ...]<br><span class="hljs-string">&quot;labels&quot;</span>: [<span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>,...]<br><span class="hljs-string">&quot;MFCCs&quot;</span>:[]<br><span class="hljs-string">&quot;files&quot;</span>:[<span class="hljs-string">&quot;dataset/on/1.wav&quot;</span>,...]<br># this is the json output file should look like<br>&#123;<br>    <span class="hljs-string">&quot;mapping&quot;</span>: [],<br>    <span class="hljs-string">&quot;labels&quot;</span>: [],<br>    <span class="hljs-string">&quot;MFCCs&quot;</span>: [],<br>    <span class="hljs-string">&quot;files&quot;</span>: []<br>&#125;<br><br></code></pre></td></tr></table></figure><p>This is the dataset: <a href="https://www.youtube.com/redirect?event=video_description&amp;redir_token=QUFFLUhqbFM2bkdkS19xUDhvc3dycDZjYWZBSnFjLU8wd3xBQ3Jtc0trekREWnZ0U1RUeDJaZnFsOU9QVjJrZGtiMzJzSmNPOTB2MEhVLUtKanNjX0ZtdW1qQ0RnVndKTFZLb2pTZnNoT3pYTGlpaUtFTnNmeHcyVFMzVVFNOUZYSkJLVDNCaGhKRlV4Mno5YjlpdjJwaC02WQ&amp;q=https://ai.googleblog.com/2017/08/launching-speech-commands-dataset.html&amp;v=VPJ2jazh_KI">https://www.youtube.com/redirect?event=video_description&amp;redir_token=QUFFLUhqbFM2bkdkS19xUDhvc3dycDZjYWZBSnFjLU8wd3xBQ3Jtc0trekREWnZ0U1RUeDJaZnFsOU9QVjJrZGtiMzJzSmNPOTB2MEhVLUtKanNjX0ZtdW1qQ0RnVndKTFZLb2pTZnNoT3pYTGlpaUtFTnNmeHcyVFMzVVFNOUZYSkJLVDNCaGhKRlV4Mno5YjlpdjJwaC02WQ&amp;q=https%3A%2F%2Fai.googleblog.com%2F2017%2F08%2Flaunching-speech-commands-dataset.html&amp;v=VPJ2jazh_KI</a></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> librosa<br><span class="hljs-keyword">import</span> os<br><span class="hljs-keyword">import</span> json<br><br>DATASET_PATH = <span class="hljs-string">&quot;dataset&quot;</span><br>JSON_PATH = <span class="hljs-string">&quot;data.json&quot;</span><br>SAMPLES_TO_CONSIDER = <span class="hljs-number">22050</span> <span class="hljs-comment"># 1 sec. of audio</span><br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">preprocess_dataset</span>(<span class="hljs-params">dataset_path, json_path, num_mfcc=<span class="hljs-number">13</span>, n_fft=<span class="hljs-number">2048</span>, hop_length=<span class="hljs-number">512</span></span>):<br>    <span class="hljs-string">&quot;&quot;&quot;Extracts MFCCs from music dataset and saves them into a json file.</span><br><span class="hljs-string">    :param dataset_path (str): Path to dataset</span><br><span class="hljs-string">    :param json_path (str): Path to json file used to save MFCCs</span><br><span class="hljs-string">    :param num_mfcc (int): Number of coefficients to extract</span><br><span class="hljs-string">    :param n_fft (int): Interval we consider to apply FFT. Measured in # of samples</span><br><span class="hljs-string">    :param hop_length (int): Sliding window for FFT. Measured in # of samples</span><br><span class="hljs-string">    :return:</span><br><span class="hljs-string">    &quot;&quot;&quot;</span><br><br>    <span class="hljs-comment"># dictionary where we&#x27;ll store mapping, labels, MFCCs and filenames</span><br>    data = &#123;<br>        <span class="hljs-string">&quot;mapping&quot;</span>: [],<br>        <span class="hljs-string">&quot;labels&quot;</span>: [],<br>        <span class="hljs-string">&quot;MFCCs&quot;</span>: [],<br>        <span class="hljs-string">&quot;files&quot;</span>: []<br>    &#125;<br><br>    <span class="hljs-comment"># loop through all sub-dirs</span><br>    <span class="hljs-keyword">for</span> i, (dirpath, dirnames, filenames) <span class="hljs-keyword">in</span> <span class="hljs-built_in">enumerate</span>(os.walk(dataset_path)):<br><br>        <span class="hljs-comment"># ensure we&#x27;re at sub-folder level</span><br>        <span class="hljs-keyword">if</span> dirpath <span class="hljs-keyword">is</span> <span class="hljs-keyword">not</span> dataset_path:<br><br>            <span class="hljs-comment"># save label (i.e., sub-folder name) in the mapping</span><br>            <span class="hljs-comment"># dataset/down -&gt; [dataset, down]</span><br>            label = dirpath.split(<span class="hljs-string">&quot;/&quot;</span>)[-<span class="hljs-number">1</span>]    <br>            data[<span class="hljs-string">&quot;mapping&quot;</span>].append(label)<br>            <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;\nProcessing: &#x27;&#123;&#125;&#x27;&quot;</span>.<span class="hljs-built_in">format</span>(label))<br><br>            <span class="hljs-comment"># process all audio files in sub-dir and store MFCCs</span><br>            <span class="hljs-keyword">for</span> f <span class="hljs-keyword">in</span> filenames:<br>                file_path = os.path.join(dirpath, f)<br><br>                <span class="hljs-comment"># load audio file and slice it to ensure length consistency among different files</span><br>                signal, sample_rate = librosa.load(file_path)<br><br>                <span class="hljs-comment"># drop audio files with less than pre-decided number of samples</span><br>                <span class="hljs-keyword">if</span> <span class="hljs-built_in">len</span>(signal) &gt;= SAMPLES_TO_CONSIDER:<br><br>                    <span class="hljs-comment"># ensure consistency of the length of the signal</span><br>                    signal = signal[:SAMPLES_TO_CONSIDER]<br><br>                    <span class="hljs-comment"># extract MFCCs</span><br>                    MFCCs = librosa.feature.mfcc(signal, sample_rate, n_mfcc=num_mfcc, n_fft=n_fft,<br>                                                 hop_length=hop_length)<br><br>                    <span class="hljs-comment"># store data for analysed track</span><br>                    data[<span class="hljs-string">&quot;MFCCs&quot;</span>].append(MFCCs.T.tolist())<br>                    data[<span class="hljs-string">&quot;labels&quot;</span>].append(i-<span class="hljs-number">1</span>)<br>                    data[<span class="hljs-string">&quot;files&quot;</span>].append(file_path)<br>                    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;&#123;&#125;: &#123;&#125;&quot;</span>.<span class="hljs-built_in">format</span>(file_path, i-<span class="hljs-number">1</span>))<br><br>    <span class="hljs-comment"># save data in json file</span><br>    <span class="hljs-keyword">with</span> <span class="hljs-built_in">open</span>(json_path, <span class="hljs-string">&quot;w&quot;</span>) <span class="hljs-keyword">as</span> fp:<br>        json.dump(data, fp, indent=<span class="hljs-number">4</span>)<br><br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&quot;__main__&quot;</span>:<br>    preprocess_dataset(DATASET_PATH, JSON_PATH)<br></code></pre></td></tr></table></figure><h2 id="2-Train-the-model-train-py"><a href="#2-Train-the-model-train-py" class="headerlink" title="2. Train the model (train.py)"></a>2. Train the model (train.py)</h2>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>Python Deep Learning</title>
    <link href="/2022/05/08/Python-Deep-Learning/"/>
    <url>/2022/05/08/Python-Deep-Learning/</url>
    
    <content type="html"><![CDATA[]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>SLP Companies in Ireland</title>
    <link href="/2022/05/05/SLP-Companies-in-Ireland/"/>
    <url>/2022/05/05/SLP-Companies-in-Ireland/</url>
    
    <content type="html"><![CDATA[<p>Iconic Translation Machines Ltd.: Language Weaver.Technology and innovation combined with a deeper collaboration from human interaction.：<a href="https://www.rws.com/language-weaver/">https://www.rws.com/language-weaver/</a></p><p>adaptcentre：<a href="https://www.adaptcentre.ie/#1">https://www.adaptcentre.ie/#1</a></p><p>oysis: <a href="https://www.topionetworks.com/companies/voysis-58adc0fc2033d420e1000009">https://www.topionetworks.com/companies/voysis-58adc0fc2033d420e1000009</a></p><p>North AI</p><p>Amazon:</p><p>Aylien:<a href="https://aylien.com/">https://aylien.com/</a></p><p>SoapBox Labs</p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>Web Design</title>
    <link href="/2022/05/01/Web-Design/"/>
    <url>/2022/05/01/Web-Design/</url>
    
    <content type="html"><![CDATA[<h1 id="Wordpress"><a href="#Wordpress" class="headerlink" title="Wordpress"></a>Wordpress</h1><img src="/2022/05/01/Web-Design/WechatIMG414.jpeg" class title="image"><p>wordpress是我比较推荐的网页开发框架，优点是开源方便，但是缺点也非常明显，就是它不支持国内网访问，并且有的时候并不是很快。但是不失为一种访问静态网站的神器。</p><p>This is the Anther theme from the wordpress. </p><p>There are many suggested wordpress themes:</p><h1 id="Hexo"><a href="#Hexo" class="headerlink" title="Hexo"></a>Hexo</h1><h2 id="What-is-Hexo"><a href="#What-is-Hexo" class="headerlink" title="What is Hexo"></a>What is Hexo</h2><p>Hexo is a kind of blog architecure for us to easily deploy, also, it is very convinient for us to realize it with our Github pages.</p><h2 id="2-How-to-install-Hexo"><a href="#2-How-to-install-Hexo" class="headerlink" title="2. How to install Hexo"></a>2. How to install Hexo</h2><h3 id="2-1-Install-Node-js"><a href="#2-1-Install-Node-js" class="headerlink" title="2.1 Install Node.js"></a>2.1 Install Node.js</h3><img src="/2022/05/01/Web-Design/nodejs.jpeg" class><p>There are three commands which will be used everyday:</p><h3 id="2-2-Daily-Commands"><a href="#2-2-Daily-Commands" class="headerlink" title="2.2 Daily Commands"></a>2.2 Daily Commands</h3><figure class="highlight bash"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></div></td><td class="code"><pre><code class="hljs Bash"><br>hexo clean       <span class="hljs-comment"># this is for cleaning the database</span><br>hexo g <br><span class="hljs-comment">#or </span><br>hexo generate  <span class="hljs-comment"># this is to generate the website with the latest updation</span><br><br><br>hexo d<br><span class="hljs-comment"># or</span><br>hexo deploy      <span class="hljs-comment"># deploy your webiste into your github repository</span><br><br><br>hexo new <span class="hljs-string">&quot;the_post_name_you_want_to_add_in&quot;</span><br><br><br><br>hexo cl &amp;&amp; hexo g &amp;&amp; hexo d  <span class="hljs-comment"># Just deploy totally into your github </span><br><br></code></pre></td></tr></table></figure>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>NLP Python</title>
    <link href="/2022/05/01/NLP-Python/"/>
    <url>/2022/05/01/NLP-Python/</url>
    
    <content type="html"><![CDATA[<h1 id="Text-Processing"><a href="#Text-Processing" class="headerlink" title="Text Processing"></a>Text Processing</h1><h2 id="Capturing-Text-Data"><a href="#Capturing-Text-Data" class="headerlink" title="Capturing Text Data"></a>Capturing Text Data</h2><h3 id="Plain-Text"><a href="#Plain-Text" class="headerlink" title="Plain Text"></a>Plain Text</h3><figure class="highlight python"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></div></td><td class="code"><pre><code class="hljs Python"><span class="hljs-keyword">import</span> os<br><br><span class="hljs-comment"># Read in a plain text file</span><br><span class="hljs-keyword">with</span> <span class="hljs-built_in">open</span>(os.path.join(<span class="hljs-string">&quot;data&quot;</span>, <span class="hljs-string">&quot;hieroglyph.txt&quot;</span>), <span class="hljs-string">&quot;r&quot;</span>) <span class="hljs-keyword">as</span> f:<br>    text = f.read()<br>    <span class="hljs-built_in">print</span>(text)<br></code></pre></td></tr></table></figure><p>Hieroglyphic writing dates from c. 3000 BC, and is composed of hundreds of symbols. A hieroglyph can represent a word, a sound, or a silent determinative; and the same symbol can serve different purposes in different contexts. Hieroglyphs were a formal script, used on stone monuments and in tombs, that could be as detailed as individual works of art.</p><h3 id="Tabular-Data"><a href="#Tabular-Data" class="headerlink" title="Tabular Data"></a>Tabular Data</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs Python"><span class="hljs-keyword">import</span> pandas <span class="hljs-keyword">as</span> pd<br><br><span class="hljs-comment"># Extract text column from a dataframe</span><br>df = pd.read_csv(os.path.join(<span class="hljs-string">&quot;data&quot;</span>, <span class="hljs-string">&quot;news.csv&quot;</span>))<br>df.head()[[<span class="hljs-string">&#x27;publisher&#x27;</span>, <span class="hljs-string">&#x27;title&#x27;</span>]]<br><br><span class="hljs-comment"># Convert text column to lowercase</span><br>df[<span class="hljs-string">&#x27;title&#x27;</span>] = df[<span class="hljs-string">&#x27;title&#x27;</span>].<span class="hljs-built_in">str</span>.lower()<br>df.head()[[<span class="hljs-string">&#x27;publisher&#x27;</span>, <span class="hljs-string">&#x27;title&#x27;</span>]]<br></code></pre></td></tr></table></figure><p>publisher    title<br>0    Livemint    fed’s charles plosser sees high bar for change…<br>1    IFA Magazine    us open: stocks fall after fed official hints …<br>2    IFA Magazine    fed risks falling ‘behind the curve’, charles …<br>3    Moneynews    fed’s plosser: nasty weather has curbed job gr…<br>4    NASDAQ    plosser: fed may have to accelerate tapering pace</p><h3 id="Online-Resource"><a href="#Online-Resource" class="headerlink" title="Online Resource"></a>Online Resource</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs Python"><span class="hljs-keyword">import</span> requests<br><span class="hljs-keyword">import</span> json<br><br><span class="hljs-comment"># Fetch data from a REST API</span><br>r = requests.get(<br>    <span class="hljs-string">&quot;https://quotes.rest/qod.json&quot;</span>)<br>res = r.json()<br><span class="hljs-built_in">print</span>(json.dumps(res, indent=<span class="hljs-number">4</span>))<br><br><span class="hljs-comment"># Extract relevant object and field</span><br>q = res[<span class="hljs-string">&quot;contents&quot;</span>][<span class="hljs-string">&quot;quotes&quot;</span>][<span class="hljs-number">0</span>]<br><span class="hljs-built_in">print</span>(q[<span class="hljs-string">&quot;quote&quot;</span>], <span class="hljs-string">&quot;\n--&quot;</span>, q[<span class="hljs-string">&quot;author&quot;</span>])<br></code></pre></td></tr></table></figure><h2 id="Cleaning"><a href="#Cleaning" class="headerlink" title="Cleaning"></a>Cleaning</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs Python"><span class="hljs-keyword">import</span> requests<br><br><span class="hljs-comment"># Fetch a web page</span><br>r = requests.get(<span class="hljs-string">&quot;https://news.ycombinator.com&quot;</span>)<br><span class="hljs-built_in">print</span>(r.text)<br></code></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;en&quot;</span> <span class="hljs-attr">op</span>=<span class="hljs-string">&quot;news&quot;</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;referrer&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;origin&quot;</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;viewport&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">link</span> <span class="hljs-attr">rel</span>=<span class="hljs-string">&quot;stylesheet&quot;</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text/css&quot;</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;news.css?5eYyZbFhPFukXyt5EaSy&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">link</span> <span class="hljs-attr">rel</span>=<span class="hljs-string">&quot;shortcut icon&quot;</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;favicon.ico&quot;</span>&gt;</span><br>  \ autocapitalize=&quot;off&quot; autocomplete=&quot;false&quot;&gt;<span class="hljs-tag">&lt;/<span class="hljs-name">form</span>&gt;</span><br>            <span class="hljs-tag">&lt;/<span class="hljs-name">center</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">tr</span>&gt;</span><br>      <span class="hljs-tag">&lt;/<span class="hljs-name">table</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">center</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&#x27;text/javascript&#x27;</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&#x27;hn.js?5eYyZbFhPFukXyt5EaSy&#x27;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs Python"><span class="hljs-keyword">import</span> re<br><br><span class="hljs-comment"># Remove HTML tags using RegEx</span><br>pattern = re.<span class="hljs-built_in">compile</span>(<span class="hljs-string">r&#x27;&lt;.*?&gt;&#x27;</span>)  <span class="hljs-comment"># tags look like &lt;...&gt;</span><br><span class="hljs-built_in">print</span>(pattern.sub(<span class="hljs-string">&#x27;&#x27;</span>, r.text))  <span class="hljs-comment"># replace them with blank</span><br></code></pre></td></tr></table></figure><div class="code-wrapper"><pre><code class="hljs">    Hacker News                  Hacker News          new | past | comments | ask | show | jobs | submit                                      login  1.      Fig (fig.io)    241 points by behnamoh 2 hours ago  | hide | 40&amp;nbsp;comments                              2.      Internet Archive joins opposition to the “SMART Copyright Act” (archive.org)    375 points by raybb 7 hours ago  | hide | 92&amp;nbsp;comments                              3.      Noto emoji, a new black and white emoji font with less color (googleblog.com)    313 points by Vinnl 8 hours ago  | hide | 70&amp;nbsp;comments                              4.      Software Jailbreak for Any Kindle (mobileread.com)    162 points by woliveirajr 7 hours ago  | hide | 69&amp;nbsp;comments                              5.      GnuCash (gnucash.org)    192 points by je_bailey 9 hours ago  | hide | 71&amp;nbsp;comments             158 points by legrande 13 hours ago  | hide | 194&amp;nbsp;comments              ......              29.      Create YouTube playlists as links without having to log into YouTube (playlists.at)    23 points by nevernothing 5 hours ago  | hide | 6&amp;nbsp;comments                              30.      Doctree (github.com/sourcegraph)    123 points by tosh 14 hours ago  | hide | 32&amp;nbsp;comments                          More        Applications are open for YC Summer 2022  Guidelines    | FAQ    | Lists    | API    | Security    | Legal    | Apply to YC    | ContactSearch:</code></pre></div><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs Python"><span class="hljs-comment"># Find all articles</span><br>summaries = soup.find_all(<span class="hljs-string">&quot;tr&quot;</span>, class_=<span class="hljs-string">&quot;athing&quot;</span>)<br>summaries[<span class="hljs-number">0</span>]<br></code></pre></td></tr></table></figure><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs routeros">&lt;tr <span class="hljs-attribute">class</span>=<span class="hljs-string">&quot;athing&quot;</span> <span class="hljs-attribute">id</span>=<span class="hljs-string">&quot;31222277&quot;</span>&gt;<br>      &lt;td <span class="hljs-attribute">align</span>=<span class="hljs-string">&quot;right&quot;</span> <span class="hljs-attribute">class</span>=<span class="hljs-string">&quot;title&quot;</span> <span class="hljs-attribute">valign</span>=<span class="hljs-string">&quot;top&quot;</span>&gt;&lt;span <span class="hljs-attribute">class</span>=<span class="hljs-string">&quot;rank&quot;</span>&gt;1.&lt;/span&gt;&lt;/td&gt;      &lt;td <span class="hljs-attribute">class</span>=<span class="hljs-string">&quot;votelinks&quot;</span> <span class="hljs-attribute">valign</span>=<span class="hljs-string">&quot;top&quot;</span>&gt;&lt;center&gt;&lt;a <span class="hljs-attribute">href</span>=<span class="hljs-string">&quot;vote?id=31222277&amp;amp;how=up&amp;amp;goto=news&quot;</span> <span class="hljs-attribute">id</span>=<span class="hljs-string">&quot;up_31222277&quot;</span>&gt;&lt;div <span class="hljs-attribute">class</span>=<span class="hljs-string">&quot;votearrow&quot;</span> <span class="hljs-attribute">title</span>=<span class="hljs-string">&quot;upvote&quot;</span>&gt;&lt;/div&gt;&lt;/a&gt;&lt;/center&gt;&lt;/td&gt;&lt;td <span class="hljs-attribute">class</span>=<span class="hljs-string">&quot;title&quot;</span>&gt;&lt;a <span class="hljs-attribute">class</span>=<span class="hljs-string">&quot;titlelink&quot;</span> <span class="hljs-attribute">href</span>=<span class="hljs-string">&quot;https://fig.io/&quot;</span>&gt;Fig&lt;/a&gt;&lt;span <span class="hljs-attribute">class</span>=<span class="hljs-string">&quot;sitebit comhead&quot;</span>&gt; (&lt;a <span class="hljs-attribute">href</span>=<span class="hljs-string">&quot;from?site=fig.io&quot;</span>&gt;&lt;span <span class="hljs-attribute">class</span>=<span class="hljs-string">&quot;sitestr&quot;</span>&gt;fig.io&lt;/span&gt;&lt;/a&gt;)&lt;/span&gt;&lt;/td&gt;&lt;/tr&gt;<br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs Python"><span class="hljs-comment"># Extract title</span><br>summaries[<span class="hljs-number">0</span>].find(<span class="hljs-string">&quot;a&quot;</span>, class_=<span class="hljs-string">&quot;storylink&quot;</span>).get_text().strip()<br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs Python"><span class="hljs-comment"># Find all articles, extract titles</span><br>articles = []<br>summaries = soup.find_all(<span class="hljs-string">&quot;tr&quot;</span>, class_=<span class="hljs-string">&quot;athing&quot;</span>)<br><span class="hljs-keyword">for</span> summary <span class="hljs-keyword">in</span> summaries:<br>    title = summary.find(<span class="hljs-string">&quot;a&quot;</span>, class_=<span class="hljs-string">&quot;storylink&quot;</span>).get_text().strip()<br>    articles.append((title))<br><br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">len</span>(articles), <span class="hljs-string">&quot;Article summaries found. Sample:&quot;</span>)<br><span class="hljs-built_in">print</span>(articles[<span class="hljs-number">0</span>])<br></code></pre></td></tr></table></figure><h2 id="Normalization"><a href="#Normalization" class="headerlink" title="Normalization"></a>Normalization</h2><h3 id="Case-Normalization"><a href="#Case-Normalization" class="headerlink" title="Case Normalization"></a>Case Normalization</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs Python"><span class="hljs-comment"># Sample text</span><br>text = <span class="hljs-string">&quot;The first time you see The Second Renaissance it may look boring. Look at it at least twice and definitely watch part 2. It will change your view of the matrix. Are the human people the ones who started the war ? Is AI a bad thing ?&quot;</span><br><span class="hljs-built_in">print</span>(text)<br></code></pre></td></tr></table></figure><figure class="highlight livecodeserver"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs livecodeserver">The <span class="hljs-keyword">first</span> <span class="hljs-built_in">time</span> you see The Second Renaissance <span class="hljs-keyword">it</span> may look boring. Look <span class="hljs-keyword">at</span> <span class="hljs-keyword">it</span> <span class="hljs-keyword">at</span> least twice <span class="hljs-keyword">and</span> definitely watch part <span class="hljs-number">2.</span> It will change your view <span class="hljs-keyword">of</span> <span class="hljs-keyword">the</span> matrix. Are <span class="hljs-keyword">the</span> human people <span class="hljs-keyword">the</span> ones who started <span class="hljs-keyword">the</span> war ? Is AI <span class="hljs-keyword">a</span> bad thing ?<br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs Python"><span class="hljs-comment"># Convert to lowercase</span><br>text = text.lower() <br><span class="hljs-built_in">print</span>(text)<br></code></pre></td></tr></table></figure><figure class="highlight livecodeserver"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs livecodeserver"><span class="hljs-keyword">the</span> <span class="hljs-keyword">first</span> <span class="hljs-built_in">time</span> you see <span class="hljs-keyword">the</span> <span class="hljs-keyword">second</span> renaissance <span class="hljs-keyword">it</span> may look boring. look <span class="hljs-keyword">at</span> <span class="hljs-keyword">it</span> <span class="hljs-keyword">at</span> least twice <span class="hljs-keyword">and</span> definitely watch part <span class="hljs-number">2.</span> <span class="hljs-keyword">it</span> will change your view <span class="hljs-keyword">of</span> <span class="hljs-keyword">the</span> matrix. are <span class="hljs-keyword">the</span> human people <span class="hljs-keyword">the</span> ones who started <span class="hljs-keyword">the</span> war ? is ai <span class="hljs-keyword">a</span> bad thing ?<br></code></pre></td></tr></table></figure><h3 id="Punctuation-Removal"><a href="#Punctuation-Removal" class="headerlink" title="Punctuation Removal"></a>Punctuation Removal</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs Python"><span class="hljs-keyword">import</span> re<br><br><span class="hljs-comment"># Remove punctuation characters</span><br>text = re.sub(<span class="hljs-string">r&quot;[^a-zA-Z0-9]&quot;</span>, <span class="hljs-string">&quot; &quot;</span>, text) <br><span class="hljs-built_in">print</span>(text)<br></code></pre></td></tr></table></figure><figure class="highlight livecodeserver"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs livecodeserver"><span class="hljs-keyword">the</span> <span class="hljs-keyword">first</span> <span class="hljs-built_in">time</span> you see <span class="hljs-keyword">the</span> <span class="hljs-keyword">second</span> renaissance <span class="hljs-keyword">it</span> may look boring  look <span class="hljs-keyword">at</span> <span class="hljs-keyword">it</span> <span class="hljs-keyword">at</span> least twice <span class="hljs-keyword">and</span> definitely watch part <span class="hljs-number">2</span>  <span class="hljs-keyword">it</span> will change your view <span class="hljs-keyword">of</span> <span class="hljs-keyword">the</span> matrix  are <span class="hljs-keyword">the</span> human people <span class="hljs-keyword">the</span> ones who started <span class="hljs-keyword">the</span> war   is ai <span class="hljs-keyword">a</span> bad thing  <br></code></pre></td></tr></table></figure><h2 id="Tokenization"><a href="#Tokenization" class="headerlink" title="Tokenization"></a>Tokenization</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs Python"><span class="hljs-comment"># Split text into tokens (words)</span><br>words = text.split()<br><span class="hljs-built_in">print</span>(words)<br></code></pre></td></tr></table></figure><figure class="highlight scheme"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs scheme">[<span class="hljs-symbol">&#x27;the</span>&#x27;, <span class="hljs-symbol">&#x27;first</span>&#x27;, <span class="hljs-symbol">&#x27;time</span>&#x27;, <span class="hljs-symbol">&#x27;you</span>&#x27;, <span class="hljs-symbol">&#x27;see</span>&#x27;, <span class="hljs-symbol">&#x27;the</span>&#x27;, <span class="hljs-symbol">&#x27;second</span>&#x27;, <span class="hljs-symbol">&#x27;renaissance</span>&#x27;, <span class="hljs-symbol">&#x27;it</span>&#x27;, <span class="hljs-symbol">&#x27;may</span>&#x27;, <span class="hljs-symbol">&#x27;look</span>&#x27;, <span class="hljs-symbol">&#x27;boring</span>&#x27;, <span class="hljs-symbol">&#x27;look</span>&#x27;, <span class="hljs-symbol">&#x27;at</span>&#x27;, <span class="hljs-symbol">&#x27;it</span>&#x27;, <span class="hljs-symbol">&#x27;at</span>&#x27;, <span class="hljs-symbol">&#x27;least</span>&#x27;, <span class="hljs-symbol">&#x27;twice</span>&#x27;, <span class="hljs-symbol">&#x27;and</span>&#x27;, <span class="hljs-symbol">&#x27;definitely</span>&#x27;, <span class="hljs-symbol">&#x27;watch</span>&#x27;, <span class="hljs-symbol">&#x27;part</span>&#x27;, <span class="hljs-symbol">&#x27;2</span>&#x27;, <span class="hljs-symbol">&#x27;it</span>&#x27;, <span class="hljs-symbol">&#x27;will</span>&#x27;, <span class="hljs-symbol">&#x27;change</span>&#x27;, <span class="hljs-symbol">&#x27;your</span>&#x27;, <span class="hljs-symbol">&#x27;view</span>&#x27;, <span class="hljs-symbol">&#x27;of</span>&#x27;, <span class="hljs-symbol">&#x27;the</span>&#x27;, <span class="hljs-symbol">&#x27;matrix</span>&#x27;, <span class="hljs-symbol">&#x27;are</span>&#x27;, <span class="hljs-symbol">&#x27;the</span>&#x27;, <span class="hljs-symbol">&#x27;human</span>&#x27;, <span class="hljs-symbol">&#x27;people</span>&#x27;, <span class="hljs-symbol">&#x27;the</span>&#x27;, <span class="hljs-symbol">&#x27;ones</span>&#x27;, <span class="hljs-symbol">&#x27;who</span>&#x27;, <span class="hljs-symbol">&#x27;started</span>&#x27;, <span class="hljs-symbol">&#x27;the</span>&#x27;, <span class="hljs-symbol">&#x27;war</span>&#x27;, <span class="hljs-symbol">&#x27;is</span>&#x27;, <span class="hljs-symbol">&#x27;ai</span>&#x27;, <span class="hljs-symbol">&#x27;a</span>&#x27;, <span class="hljs-symbol">&#x27;bad</span>&#x27;, <span class="hljs-symbol">&#x27;thing</span>&#x27;]<br></code></pre></td></tr></table></figure><h3 id="NLTK-Natural-Language-ToolKit"><a href="#NLTK-Natural-Language-ToolKit" class="headerlink" title="NLTK: Natural Language ToolKit"></a>NLTK: Natural Language ToolKit</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs Python"><span class="hljs-keyword">import</span> os<br><span class="hljs-keyword">import</span> nltk<br>nltk.data.path.append(os.path.join(os.getcwd(), <span class="hljs-string">&quot;nltk_data&quot;</span>))<br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs Python"><span class="hljs-comment"># Another sample text</span><br>text = <span class="hljs-string">&quot;Dr. Smith graduated from the University of Washington. He later started an analytics firm called Lux, which catered to enterprise customers.&quot;</span><br><span class="hljs-built_in">print</span>(text)<br></code></pre></td></tr></table></figure><figure class="highlight livecodeserver"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs livecodeserver">Dr. Smith graduated <span class="hljs-built_in">from</span> <span class="hljs-keyword">the</span> University <span class="hljs-keyword">of</span> Washington. He later started <span class="hljs-keyword">an</span> analytics firm called Lux, which catered <span class="hljs-built_in">to</span> enterprise customers.<br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs Python"><span class="hljs-keyword">from</span> nltk.tokenize <span class="hljs-keyword">import</span> word_tokenize<br><br><span class="hljs-comment"># Split text into words using NLTK</span><br>words = word_tokenize(text)<br><span class="hljs-built_in">print</span>(words)<br></code></pre></td></tr></table></figure><figure class="highlight scheme"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs scheme">[<span class="hljs-symbol">&#x27;Dr.</span>&#x27;, <span class="hljs-symbol">&#x27;Smith</span>&#x27;, <span class="hljs-symbol">&#x27;graduated</span>&#x27;, <span class="hljs-symbol">&#x27;from</span>&#x27;, <span class="hljs-symbol">&#x27;the</span>&#x27;, <span class="hljs-symbol">&#x27;University</span>&#x27;, <span class="hljs-symbol">&#x27;of</span>&#x27;, <span class="hljs-symbol">&#x27;Washington</span>&#x27;, <span class="hljs-symbol">&#x27;.</span>&#x27;, <span class="hljs-symbol">&#x27;He</span>&#x27;, <span class="hljs-symbol">&#x27;later</span>&#x27;, <span class="hljs-symbol">&#x27;started</span>&#x27;, <span class="hljs-symbol">&#x27;an</span>&#x27;, <span class="hljs-symbol">&#x27;analytics</span>&#x27;, <span class="hljs-symbol">&#x27;firm</span>&#x27;, <span class="hljs-symbol">&#x27;called</span>&#x27;, <span class="hljs-symbol">&#x27;Lux</span>&#x27;, &#x27;,&#x27;, <span class="hljs-symbol">&#x27;which</span>&#x27;, <span class="hljs-symbol">&#x27;catered</span>&#x27;, <span class="hljs-symbol">&#x27;to</span>&#x27;, <span class="hljs-symbol">&#x27;enterprise</span>&#x27;, <span class="hljs-symbol">&#x27;customers</span>&#x27;, <span class="hljs-symbol">&#x27;.</span>&#x27;]<br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs Python"><span class="hljs-keyword">from</span> nltk.tokenize <span class="hljs-keyword">import</span> sent_tokenize<br><br><span class="hljs-comment"># Split text into sentences</span><br>sentences = sent_tokenize(text)<br><span class="hljs-built_in">print</span>(sentences)<br></code></pre></td></tr></table></figure><figure class="highlight scheme"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs scheme">[<span class="hljs-symbol">&#x27;Dr.</span> Smith graduated from the University of Washington.&#x27;, <span class="hljs-symbol">&#x27;He</span> later started an analytics firm called Lux, which catered to enterprise customers.&#x27;]<br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs Python"><span class="hljs-comment"># List stop words</span><br><span class="hljs-keyword">from</span> nltk.corpus <span class="hljs-keyword">import</span> stopwords<br><span class="hljs-built_in">print</span>(stopwords.words(<span class="hljs-string">&quot;english&quot;</span>))<br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs Python"><span class="hljs-comment"># Reset text</span><br>text = <span class="hljs-string">&quot;The first time you see The Second Renaissance it may look boring. Look at it at least twice and definitely watch part 2. It will change your view of the matrix. Are the human people the ones who started the war ? Is AI a bad thing ?&quot;</span><br><br><span class="hljs-comment"># Normalize it</span><br>text = re.sub(<span class="hljs-string">r&quot;[^a-zA-Z0-9]&quot;</span>, <span class="hljs-string">&quot; &quot;</span>, text.lower())<br><br><span class="hljs-comment"># Tokenize it</span><br>words = text.split()<br><span class="hljs-built_in">print</span>(words)<br></code></pre></td></tr></table></figure><figure class="highlight scheme"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs scheme">[<span class="hljs-symbol">&#x27;the</span>&#x27;, <span class="hljs-symbol">&#x27;first</span>&#x27;, <span class="hljs-symbol">&#x27;time</span>&#x27;, <span class="hljs-symbol">&#x27;you</span>&#x27;, <span class="hljs-symbol">&#x27;see</span>&#x27;, <span class="hljs-symbol">&#x27;the</span>&#x27;, <span class="hljs-symbol">&#x27;second</span>&#x27;, <span class="hljs-symbol">&#x27;renaissance</span>&#x27;, <span class="hljs-symbol">&#x27;it</span>&#x27;, <span class="hljs-symbol">&#x27;may</span>&#x27;, <span class="hljs-symbol">&#x27;look</span>&#x27;, <span class="hljs-symbol">&#x27;boring</span>&#x27;, <span class="hljs-symbol">&#x27;look</span>&#x27;, <span class="hljs-symbol">&#x27;at</span>&#x27;, <span class="hljs-symbol">&#x27;it</span>&#x27;, <span class="hljs-symbol">&#x27;at</span>&#x27;, <span class="hljs-symbol">&#x27;least</span>&#x27;, <span class="hljs-symbol">&#x27;twice</span>&#x27;, <span class="hljs-symbol">&#x27;and</span>&#x27;, <span class="hljs-symbol">&#x27;definitely</span>&#x27;, <span class="hljs-symbol">&#x27;watch</span>&#x27;, <span class="hljs-symbol">&#x27;part</span>&#x27;, <span class="hljs-symbol">&#x27;2</span>&#x27;, <span class="hljs-symbol">&#x27;it</span>&#x27;, <span class="hljs-symbol">&#x27;will</span>&#x27;, <span class="hljs-symbol">&#x27;change</span>&#x27;, <span class="hljs-symbol">&#x27;your</span>&#x27;, <span class="hljs-symbol">&#x27;view</span>&#x27;, <span class="hljs-symbol">&#x27;of</span>&#x27;, <span class="hljs-symbol">&#x27;the</span>&#x27;, <span class="hljs-symbol">&#x27;matrix</span>&#x27;, <span class="hljs-symbol">&#x27;are</span>&#x27;, <span class="hljs-symbol">&#x27;the</span>&#x27;, <span class="hljs-symbol">&#x27;human</span>&#x27;, <span class="hljs-symbol">&#x27;people</span>&#x27;, <span class="hljs-symbol">&#x27;the</span>&#x27;, <span class="hljs-symbol">&#x27;ones</span>&#x27;, <span class="hljs-symbol">&#x27;who</span>&#x27;, <span class="hljs-symbol">&#x27;started</span>&#x27;, <span class="hljs-symbol">&#x27;the</span>&#x27;, <span class="hljs-symbol">&#x27;war</span>&#x27;, <span class="hljs-symbol">&#x27;is</span>&#x27;, <span class="hljs-symbol">&#x27;ai</span>&#x27;, <span class="hljs-symbol">&#x27;a</span>&#x27;, <span class="hljs-symbol">&#x27;bad</span>&#x27;, <span class="hljs-symbol">&#x27;thing</span>&#x27;]<br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs Python"><span class="hljs-comment"># Remove stop words</span><br>words = [w <span class="hljs-keyword">for</span> w <span class="hljs-keyword">in</span> words <span class="hljs-keyword">if</span> w <span class="hljs-keyword">not</span> <span class="hljs-keyword">in</span> stopwords.words(<span class="hljs-string">&quot;english&quot;</span>)]<br><span class="hljs-built_in">print</span>(words)<br></code></pre></td></tr></table></figure><figure class="highlight scheme"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs scheme">[<span class="hljs-symbol">&#x27;first</span>&#x27;, <span class="hljs-symbol">&#x27;time</span>&#x27;, <span class="hljs-symbol">&#x27;see</span>&#x27;, <span class="hljs-symbol">&#x27;second</span>&#x27;, <span class="hljs-symbol">&#x27;renaissance</span>&#x27;, <span class="hljs-symbol">&#x27;may</span>&#x27;, <span class="hljs-symbol">&#x27;look</span>&#x27;, <span class="hljs-symbol">&#x27;boring</span>&#x27;, <span class="hljs-symbol">&#x27;look</span>&#x27;, <span class="hljs-symbol">&#x27;least</span>&#x27;, <span class="hljs-symbol">&#x27;twice</span>&#x27;, <span class="hljs-symbol">&#x27;definitely</span>&#x27;, <span class="hljs-symbol">&#x27;watch</span>&#x27;, <span class="hljs-symbol">&#x27;part</span>&#x27;, <span class="hljs-symbol">&#x27;2</span>&#x27;, <span class="hljs-symbol">&#x27;change</span>&#x27;, <span class="hljs-symbol">&#x27;view</span>&#x27;, <span class="hljs-symbol">&#x27;matrix</span>&#x27;, <span class="hljs-symbol">&#x27;human</span>&#x27;, <span class="hljs-symbol">&#x27;people</span>&#x27;, <span class="hljs-symbol">&#x27;ones</span>&#x27;, <span class="hljs-symbol">&#x27;started</span>&#x27;, <span class="hljs-symbol">&#x27;war</span>&#x27;, <span class="hljs-symbol">&#x27;ai</span>&#x27;, <span class="hljs-symbol">&#x27;bad</span>&#x27;, <span class="hljs-symbol">&#x27;thing</span>&#x27;]<br></code></pre></td></tr></table></figure><h3 id="Sentence-Parsing"><a href="#Sentence-Parsing" class="headerlink" title="Sentence Parsing"></a>Sentence Parsing</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs Python"><span class="hljs-keyword">import</span> nltk<br><br><span class="hljs-comment"># Define a custom grammar</span><br>my_grammar = nltk.CFG.fromstring(<span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">S -&gt; NP VP</span><br><span class="hljs-string">PP -&gt; P NP</span><br><span class="hljs-string">NP -&gt; Det N | Det N PP | &#x27;I&#x27;</span><br><span class="hljs-string">VP -&gt; V NP | VP PP</span><br><span class="hljs-string">Det -&gt; &#x27;an&#x27; | &#x27;my&#x27;</span><br><span class="hljs-string">N -&gt; &#x27;elephant&#x27; | &#x27;pajamas&#x27;</span><br><span class="hljs-string">V -&gt; &#x27;shot&#x27;</span><br><span class="hljs-string">P -&gt; &#x27;in&#x27;</span><br><span class="hljs-string">&quot;&quot;&quot;</span>)<br>parser = nltk.ChartParser(my_grammar)<br><br><span class="hljs-comment"># Parse a sentence</span><br>sentence = word_tokenize(<span class="hljs-string">&quot;I shot an elephant in my pajamas&quot;</span>)<br><span class="hljs-keyword">for</span> tree <span class="hljs-keyword">in</span> parser.parse(sentence):<br>    <span class="hljs-built_in">print</span>(tree)<br></code></pre></td></tr></table></figure><figure class="highlight clojure"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs clojure"><br>(<span class="hljs-name">S</span><br>  (<span class="hljs-name">NP</span> I)<br>  (<span class="hljs-name">VP</span><br>    (<span class="hljs-name">VP</span> (<span class="hljs-name">V</span> shot) (<span class="hljs-name">NP</span> (<span class="hljs-name">Det</span> an) (<span class="hljs-name">N</span> elephant)))<br>    (<span class="hljs-name">PP</span> (<span class="hljs-name">P</span> in) (<span class="hljs-name">NP</span> (<span class="hljs-name">Det</span> my) (<span class="hljs-name">N</span> pajamas)))))<br>(<span class="hljs-name">S</span><br>  (<span class="hljs-name">NP</span> I)<br>  (<span class="hljs-name">VP</span><br>    (<span class="hljs-name">V</span> shot)<br>    (<span class="hljs-name">NP</span> (<span class="hljs-name">Det</span> an) (<span class="hljs-name">N</span> elephant) (<span class="hljs-name">PP</span> (<span class="hljs-name">P</span> in) (<span class="hljs-name">NP</span> (<span class="hljs-name">Det</span> my) (<span class="hljs-name">N</span> pajamas))))))<br></code></pre></td></tr></table></figure><h2 id="Stemming-amp-Lemmatization"><a href="#Stemming-amp-Lemmatization" class="headerlink" title="Stemming &amp; Lemmatization"></a>Stemming &amp; Lemmatization</h2><h3 id="Stemming"><a href="#Stemming" class="headerlink" title="Stemming"></a>Stemming</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs Python"><span class="hljs-keyword">from</span> nltk.stem.porter <span class="hljs-keyword">import</span> PorterStemmer<br><br><span class="hljs-comment"># Reduce words to their stems</span><br>stemmed = [PorterStemmer().stem(w) <span class="hljs-keyword">for</span> w <span class="hljs-keyword">in</span> words]<br><span class="hljs-built_in">print</span>(stemmed)<br></code></pre></td></tr></table></figure><figure class="highlight scheme"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs scheme">[<span class="hljs-symbol">&#x27;first</span>&#x27;, <span class="hljs-symbol">&#x27;time</span>&#x27;, <span class="hljs-symbol">&#x27;see</span>&#x27;, <span class="hljs-symbol">&#x27;second</span>&#x27;, <span class="hljs-symbol">&#x27;renaiss</span>&#x27;, <span class="hljs-symbol">&#x27;may</span>&#x27;, <span class="hljs-symbol">&#x27;look</span>&#x27;, <span class="hljs-symbol">&#x27;bore</span>&#x27;, <span class="hljs-symbol">&#x27;look</span>&#x27;, <span class="hljs-symbol">&#x27;least</span>&#x27;, <span class="hljs-symbol">&#x27;twice</span>&#x27;, <span class="hljs-symbol">&#x27;definit</span>&#x27;, <span class="hljs-symbol">&#x27;watch</span>&#x27;, <span class="hljs-symbol">&#x27;part</span>&#x27;, <span class="hljs-symbol">&#x27;2</span>&#x27;, <span class="hljs-symbol">&#x27;chang</span>&#x27;, <span class="hljs-symbol">&#x27;view</span>&#x27;, <span class="hljs-symbol">&#x27;matrix</span>&#x27;, <span class="hljs-symbol">&#x27;human</span>&#x27;, <span class="hljs-symbol">&#x27;peopl</span>&#x27;, <span class="hljs-symbol">&#x27;one</span>&#x27;, <span class="hljs-symbol">&#x27;start</span>&#x27;, <span class="hljs-symbol">&#x27;war</span>&#x27;, <span class="hljs-symbol">&#x27;ai</span>&#x27;, <span class="hljs-symbol">&#x27;bad</span>&#x27;, <span class="hljs-symbol">&#x27;thing</span>&#x27;]<br></code></pre></td></tr></table></figure><h3 id="Lemmatization"><a href="#Lemmatization" class="headerlink" title="Lemmatization"></a>Lemmatization</h3><figure class="highlight coffeescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs coffeescript"><span class="hljs-keyword">from</span> nltk.stem.wordnet <span class="hljs-keyword">import</span> WordNetLemmatizer<br><br><span class="hljs-comment"># Reduce words to their root form</span><br>lemmed = [WordNetLemmatizer().lemmatize(w) <span class="hljs-keyword">for</span> w <span class="hljs-keyword">in</span> words]<br><span class="hljs-built_in">print</span>(lemmed)<br></code></pre></td></tr></table></figure><figure class="highlight scheme"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs scheme">[<span class="hljs-symbol">&#x27;first</span>&#x27;, <span class="hljs-symbol">&#x27;time</span>&#x27;, <span class="hljs-symbol">&#x27;see</span>&#x27;, <span class="hljs-symbol">&#x27;second</span>&#x27;, <span class="hljs-symbol">&#x27;renaissance</span>&#x27;, <span class="hljs-symbol">&#x27;may</span>&#x27;, <span class="hljs-symbol">&#x27;look</span>&#x27;, <span class="hljs-symbol">&#x27;boring</span>&#x27;, <span class="hljs-symbol">&#x27;look</span>&#x27;, <span class="hljs-symbol">&#x27;least</span>&#x27;, <span class="hljs-symbol">&#x27;twice</span>&#x27;, <span class="hljs-symbol">&#x27;definitely</span>&#x27;, <span class="hljs-symbol">&#x27;watch</span>&#x27;, <span class="hljs-symbol">&#x27;part</span>&#x27;, <span class="hljs-symbol">&#x27;2</span>&#x27;, <span class="hljs-symbol">&#x27;change</span>&#x27;, <span class="hljs-symbol">&#x27;view</span>&#x27;, <span class="hljs-symbol">&#x27;matrix</span>&#x27;, <span class="hljs-symbol">&#x27;human</span>&#x27;, <span class="hljs-symbol">&#x27;people</span>&#x27;, <span class="hljs-symbol">&#x27;one</span>&#x27;, <span class="hljs-symbol">&#x27;started</span>&#x27;, <span class="hljs-symbol">&#x27;war</span>&#x27;, <span class="hljs-symbol">&#x27;ai</span>&#x27;, <span class="hljs-symbol">&#x27;bad</span>&#x27;, <span class="hljs-symbol">&#x27;thing</span>&#x27;]<br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs Python"><span class="hljs-comment"># Lemmatize verbs by specifying pos</span><br>lemmed = [WordNetLemmatizer().lemmatize(w, pos=<span class="hljs-string">&#x27;v&#x27;</span>) <span class="hljs-keyword">for</span> w <span class="hljs-keyword">in</span> lemmed]<br><span class="hljs-built_in">print</span>(lemmed)<br></code></pre></td></tr></table></figure><figure class="highlight scheme"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs scheme">[<span class="hljs-symbol">&#x27;first</span>&#x27;, <span class="hljs-symbol">&#x27;time</span>&#x27;, <span class="hljs-symbol">&#x27;see</span>&#x27;, <span class="hljs-symbol">&#x27;second</span>&#x27;, <span class="hljs-symbol">&#x27;renaissance</span>&#x27;, <span class="hljs-symbol">&#x27;may</span>&#x27;, <span class="hljs-symbol">&#x27;look</span>&#x27;, <span class="hljs-symbol">&#x27;bore</span>&#x27;, <span class="hljs-symbol">&#x27;look</span>&#x27;, <span class="hljs-symbol">&#x27;least</span>&#x27;, <span class="hljs-symbol">&#x27;twice</span>&#x27;, <span class="hljs-symbol">&#x27;definitely</span>&#x27;, <span class="hljs-symbol">&#x27;watch</span>&#x27;, <span class="hljs-symbol">&#x27;part</span>&#x27;, <span class="hljs-symbol">&#x27;2</span>&#x27;, <span class="hljs-symbol">&#x27;change</span>&#x27;, <span class="hljs-symbol">&#x27;view</span>&#x27;, <span class="hljs-symbol">&#x27;matrix</span>&#x27;, <span class="hljs-symbol">&#x27;human</span>&#x27;, <span class="hljs-symbol">&#x27;people</span>&#x27;, <span class="hljs-symbol">&#x27;one</span>&#x27;, <span class="hljs-symbol">&#x27;start</span>&#x27;, <span class="hljs-symbol">&#x27;war</span>&#x27;, <span class="hljs-symbol">&#x27;ai</span>&#x27;, <span class="hljs-symbol">&#x27;bad</span>&#x27;, <span class="hljs-symbol">&#x27;thing</span>&#x27;]<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>From Udacity NLP Nanodegree</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Audio Cpp</title>
    <link href="/2022/04/29/Audio-Cpp/"/>
    <url>/2022/04/29/Audio-Cpp/</url>
    
    <content type="html"><![CDATA[<p>Tutrorial: <a href="https://www.youtube.com/watch?v=rHqkeLxAsTc">https://www.youtube.com/watch?v=rHqkeLxAsTc</a></p><p>PCM is the atual data that combined the wav file.</p><figure class="highlight bash"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><pre><code class="hljs Bash">cmake .. -GXcode<br></code></pre></td></tr></table></figure><p>This is just a code that can transform your cmake project into the Xcode mode, so this will enable you to better manipulate the projects on your Mac.</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs Bash">g++ main.cpp  <span class="hljs-comment"># this is to compile the main.cpp file</span><br><br>./a.out       <span class="hljs-comment"># this is to run the compiled main.cpp</span><br><br><br>g++ main.cpp -o program  <span class="hljs-comment"># output the compiled main.cpp file into the program</span><br>./program                <span class="hljs-comment"># run the program as well</span><br></code></pre></td></tr></table></figure><h2 id="Header-file"><a href="#Header-file" class="headerlink" title="Header file"></a>Header file</h2><p>.h is for c files, .hpp is for C++ files.</p><p>Your own header file, you just use “ “ instead of &lt;&gt; to include the header file.</p><p>MAIN_CPP &#x3D; main.cpp</p><h1 id="Tools"><a href="#Tools" class="headerlink" title="Tools"></a>Tools</h1><p>Convert Any C++ software into Web:</p><p><a href="https://emscripten.org/">https://emscripten.org/</a></p><h1 id="Developers"><a href="#Developers" class="headerlink" title="Developers"></a>Developers</h1><p>Mark Huckvale <a href="https://www.markhuckvale.com/">https://www.markhuckvale.com/</a></p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>Audio Web</title>
    <link href="/2022/04/21/Audio-Web/"/>
    <url>/2022/04/21/Audio-Web/</url>
    
    <content type="html"><![CDATA[<h1 id="BeaqleJS"><a href="#BeaqleJS" class="headerlink" title="BeaqleJS"></a>BeaqleJS</h1><p>BeaqleJS: HTML5 and JavaScript based<br>Framework for the Subjective Evaluation of<br>Audio Quality: <a href="https://github.com/HSU-ANT/beaqlejs">https://github.com/HSU-ANT/beaqlejs</a></p><h1 id="wavesurfer-js"><a href="#wavesurfer-js" class="headerlink" title="wavesurfer.js"></a>wavesurfer.js</h1><p><a href="https://wavesurfer-js.org/">https://wavesurfer-js.org/</a></p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>Speech and Matlab</title>
    <link href="/2022/04/21/Speech-and-Matlab/"/>
    <url>/2022/04/21/Speech-and-Matlab/</url>
    
    <content type="html"><![CDATA[<figure class="highlight matlab"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br></pre></div></td><td class="code"><pre><code class="hljs Matlab"><span class="hljs-comment">% Clear the workspace to avoid undesired overloading of variables</span><br><span class="hljs-comment">%clear; % Don&#x27;t do this in the online editor</span><br><br><span class="hljs-comment">% Define the sampling frequency</span><br>fs = <span class="hljs-number">44100</span>;<br><br><span class="hljs-comment">% Define the signal duration in seconds</span><br>duration = <span class="hljs-number">1</span>;<br><br><span class="hljs-comment">% Define the time scale from 0 s to duration s</span><br>t = <span class="hljs-number">0</span> : <span class="hljs-number">1</span>/fs : duration;<br><br><span class="hljs-comment">% t is a row vector; we change to be a column vector as audio signals are</span><br><span class="hljs-comment">% always column vectors in Matlab / Octave</span><br>t = t.&#x27;;<br><br><span class="hljs-comment">% Create a sine wave of f = 500 Hz</span><br>f0 = <span class="hljs-number">500</span>;<br>sine_wave = <span class="hljs-built_in">sin</span>(<span class="hljs-number">2</span>*<span class="hljs-built_in">pi</span>*f0*t);<br><br><span class="hljs-comment">% Create a new window and plot the sine wave (on the vertical axis) over t </span><br><span class="hljs-comment">% (on the horizontal axis)</span><br><span class="hljs-built_in">figure</span>(<span class="hljs-number">1</span>);<br><span class="hljs-built_in">plot</span>(t, sine_wave);<br><br><span class="hljs-comment">% Label the axes</span><br>xlabel(<span class="hljs-string">&#x27;t (s)&#x27;</span>);<br>ylabel(<span class="hljs-string">&#x27;Amplitude&#x27;</span>);<br><br><span class="hljs-comment">% Limit the range of the horizontal axis only one cycle</span><br>xlim([<span class="hljs-number">0</span> <span class="hljs-number">1</span>/f0]);<br>ylim([<span class="hljs-number">-1.1</span> <span class="hljs-number">1.1</span>]);<br><br><span class="hljs-comment">% Calculate the DFT spectrum of sine_wave</span><br>sine_wave_spectrum = fft(sine_wave);<br><br><span class="hljs-comment">% Create the frequency axis (we know that there is a number of </span><br><span class="hljs-comment">% length( sine_wave ) bins from 0 Hz to just under fs).</span><br><span class="hljs-comment">% We start with creating a number of length( sine_wave ) + 1 bin from 0 Hz </span><br><span class="hljs-comment">% to fs and then remove the last unwanted bin.</span><br>f = <span class="hljs-built_in">linspace</span>(<span class="hljs-number">0</span>, fs, <span class="hljs-built_in">length</span>(sine_wave) + <span class="hljs-number">1</span>);<br>f = f(<span class="hljs-number">1</span> : <span class="hljs-keyword">end</span><span class="hljs-number">-1</span>);<br><br><span class="hljs-comment">% Now, length(t) = length(f) = length(sine_wave) = length(sine_wave_spectrum)</span><br><br><span class="hljs-comment">% Turn f into a column vector to be consistent</span><br>f = f.&#x27;;<br><br><span class="hljs-comment">% Create a new window and plot the real part and the imaginary part of </span><br><span class="hljs-comment">% sine_wave_spectrum over f</span><br><span class="hljs-built_in">figure</span>(<span class="hljs-number">2</span>);<br><span class="hljs-built_in">plot</span>(f, <span class="hljs-built_in">real</span>(sine_wave_spectrum));<br><span class="hljs-built_in">hold</span> on; <span class="hljs-comment">% add the following graph on top of the previous</span><br><span class="hljs-built_in">plot</span>(f, <span class="hljs-built_in">imag</span>(sine_wave_spectrum), <span class="hljs-string">&#x27;r&#x27;</span>); <span class="hljs-comment">% plot in red color</span><br><span class="hljs-built_in">hold</span> off;<br><span class="hljs-comment">% put a grid onto the plot to make it easier to read</span><br>grid on;<br>xlabel(<span class="hljs-string">&#x27;f (Hz)&#x27;</span>);<br>ylabel(<span class="hljs-string">&#x27;Spectrum of sine wave&#x27;</span>);<br><br><span class="hljs-comment">% Create the same plot as above but only plot the non-redundant portion</span><br><span class="hljs-comment">% from 0 Hz up to the Nyquist frequency (fs/2)</span><br><span class="hljs-built_in">figure</span>(<span class="hljs-number">3</span>);<br><span class="hljs-built_in">plot</span>(f, <span class="hljs-built_in">real</span>(sine_wave_spectrum));<br><span class="hljs-built_in">hold</span> on; <span class="hljs-comment">% add the following graph on top of the previous</span><br><span class="hljs-built_in">plot</span>(f, <span class="hljs-built_in">imag</span>(sine_wave_spectrum), <span class="hljs-string">&#x27;r&#x27;</span>); <span class="hljs-comment">% plot in red color</span><br><span class="hljs-built_in">hold</span> off;<br><br><span class="hljs-comment">% Put a grid over the plot to make it easier to read</span><br>grid on;<br>xlabel(<span class="hljs-string">&#x27;f (Hz)&#x27;</span>);<br>ylabel(<span class="hljs-string">&#x27;Spectrum of sine wave&#x27;</span>);<br><br>xlim([<span class="hljs-number">0</span> fs/<span class="hljs-number">2</span>]);<br><br><span class="hljs-comment">% ------------------------ PUT YOUR CODE HERE --------------------------- %</span><br><span class="hljs-comment">% Create a new window and plot the magnitude of sine_wave_spectrum from </span><br><span class="hljs-comment">% 0 Hz up to the Nyqist frequency on a logarithmic scale (i.e., in dB). </span><br><span class="hljs-comment">% First, create a variable with the name &quot;sine_wave_spectrum_mag_log&quot; that </span><br><span class="hljs-comment">% contains the actual logarithmic magnitude spectrum. Note that for the </span><br><span class="hljs-comment">% present type of spectrum, the logarithmic magnitude spectrum is computed</span><br><span class="hljs-comment">% by 20 * log_10 of the magnitude spectrum on a linear scale.</span><br><span class="hljs-comment">% </span><br><span class="hljs-comment">% Next, plot &quot;sine_wave_spectrum_mag_log&quot; as instructed. </span><br><span class="hljs-comment">%</span><br><span class="hljs-comment">% Limit the portion of the y axis that is displayed to the range of </span><br><span class="hljs-comment">% [-50 dB; 100 dB]</span><br><span class="hljs-comment">% Relevant functions are abs( ), log10( ), ylim( )</span><br><br>sine_wave_spectrum_mag_log = <span class="hljs-number">20</span>*<span class="hljs-built_in">log10</span>(<span class="hljs-built_in">abs</span>(sine_wave_spectrum));<br><br><span class="hljs-built_in">figure</span>(<span class="hljs-number">4</span>);<br><span class="hljs-built_in">plot</span>(f, sine_wave_spectrum_mag_log);<br>a = <span class="hljs-number">1</span>;<br><span class="hljs-comment">% Put a grid over the plot to make it easier to read</span><br>grid on;<br>xlabel(<span class="hljs-string">&#x27;f (Hz)&#x27;</span>);<br>ylabel(<span class="hljs-string">&#x27;Magnitude spectrum of sine wave in dB&#x27;</span>);<br><br>xlim([<span class="hljs-number">0</span> fs/<span class="hljs-number">2</span>]);<br>ylim([<span class="hljs-number">-50</span> <span class="hljs-number">100</span>]);<br><br><span class="hljs-comment">% ---------------------- END PUT YOUR CODE HERE ------------------------- %</span><br><br></code></pre></td></tr></table></figure><h1 id="Modules"><a href="#Modules" class="headerlink" title="Modules"></a>Modules</h1><h2 id="Read-a-file"><a href="#Read-a-file" class="headerlink" title="Read a file"></a>Read a file</h2><figure class="highlight matlab"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs Matlab">wav_file = wavread(<span class="hljs-string">&#x27;stimuli.wav&#x27;</span>);<br></code></pre></td></tr></table></figure><h2 id="Render-or-play-the-file"><a href="#Render-or-play-the-file" class="headerlink" title="Render or play the file"></a>Render or play the file</h2><figure class="highlight matlab"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs matlab">sound(wav_file, <span class="hljs-number">44100</span>)  <span class="hljs-comment">% the 44100 is the sampling quality</span><br></code></pre></td></tr></table></figure><h2 id="Plot-the-wav"><a href="#Plot-the-wav" class="headerlink" title="Plot the wav"></a>Plot the wav</h2><figure class="highlight matlab"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs matlab"><span class="hljs-built_in">plot</span>(wav_file)<br></code></pre></td></tr></table></figure><h2 id="Slice-the-wav-file-and-select"><a href="#Slice-the-wav-file-and-select" class="headerlink" title="Slice the wav file and select"></a>Slice the wav file and select</h2><figure class="highlight matlab"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs matlab">sliced_wav_file = wav_file(<span class="hljs-number">1</span>:<span class="hljs-number">40001</span>) <span class="hljs-comment">% this is slice from the first sample to the 40001th sample</span><br></code></pre></td></tr></table></figure><h2 id="Subplotting-all-the-wav-visualization-on-a-single-window"><a href="#Subplotting-all-the-wav-visualization-on-a-single-window" class="headerlink" title="Subplotting all the wav visualization on a single window"></a>Subplotting all the wav visualization on a single window</h2><figure class="highlight matlab"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs matlab">subplot(<span class="hljs-number">3</span>,<span class="hljs-number">2</span>,<span class="hljs-number">1</span>)     <span class="hljs-comment">% the 3 here means the rows, and the 2 means the columns</span><br><span class="hljs-built_in">plot</span>(wav_file_01)<br>subplot(<span class="hljs-number">3</span>,<span class="hljs-number">2</span>,<span class="hljs-number">2</span>)<br><span class="hljs-built_in">plot</span>(wav_file_02)<br>subplot(<span class="hljs-number">3</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>)<br><span class="hljs-built_in">plot</span>(wav_file_03)<br>subplot(<span class="hljs-number">3</span>,<span class="hljs-number">2</span>,<span class="hljs-number">4</span>)<br><span class="hljs-built_in">plot</span>(wav_file_04)<br>subplot(<span class="hljs-number">3</span>,<span class="hljs-number">2</span>,<span class="hljs-number">5</span>)<br><span class="hljs-built_in">plot</span>(wav_file_05)<br>subplot(<span class="hljs-number">3</span>,<span class="hljs-number">2</span>,<span class="hljs-number">6</span>)<br><span class="hljs-built_in">plot</span>(wav_file_06)<br></code></pre></td></tr></table></figure><h2 id="Plot-the-FFT-result-visualization-（time-VS-freq-domain"><a href="#Plot-the-FFT-result-visualization-（time-VS-freq-domain" class="headerlink" title="Plot the FFT result visualization （time VS. freq domain)"></a>Plot the FFT result visualization （time VS. freq domain)</h2><figure class="highlight matlab"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs matlab">set(gca, <span class="hljs-string">&#x27;Ylim&#x27;</span>, [<span class="hljs-number">0</span> <span class="hljs-number">0.03</span>])<br>subplot(<span class="hljs-number">2</span>,<span class="hljs-number">2</span>,<span class="hljs-number">1</span>)<br>freq_plot(wav_file_01, <span class="hljs-number">900</span>, <span class="hljs-number">44100</span>)<br>set(gca, <span class="hljs-string">&#x27;Ylim&#x27;</span>, [<span class="hljs-number">0</span> <span class="hljs-number">0.03</span>])<br>subplot(<span class="hljs-number">2</span>,<span class="hljs-number">2</span>,<span class="hljs-number">2</span>)<br>freq_plot(wav_file_02, <span class="hljs-number">900</span>, <span class="hljs-number">44100</span>)<br>set(gca, <span class="hljs-string">&#x27;Ylim&#x27;</span>, [<span class="hljs-number">0</span> <span class="hljs-number">0.03</span>])<br>subplot(<span class="hljs-number">2</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>)<br>freq_plot(wav_file_03, <span class="hljs-number">900</span>, <span class="hljs-number">44100</span>)<br><br>set(gca, <span class="hljs-string">&#x27;Ylim&#x27;</span>, [<span class="hljs-number">0</span> <span class="hljs-number">0.03</span>])<br>subplot(<span class="hljs-number">2</span>,<span class="hljs-number">2</span>,<span class="hljs-number">4</span>)<br>freq_plot(wav_file_04, <span class="hljs-number">900</span>, <span class="hljs-number">44100</span>)<br></code></pre></td></tr></table></figure><h2 id="Plot-the-Spectrum-freq-VS-amp-domain"><a href="#Plot-the-Spectrum-freq-VS-amp-domain" class="headerlink" title="Plot the Spectrum (freq VS. amp domain)"></a>Plot the Spectrum (freq VS. amp domain)</h2>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>Speech Synthesis</title>
    <link href="/2022/04/01/Speech-Synthesis/"/>
    <url>/2022/04/01/Speech-Synthesis/</url>
    
    <content type="html"><![CDATA[<p>Four types of synthetic speech:</p><ol><li>Mechanical Speech</li><li>Formant Synthesis: Based on Source&#x2F;Filter Theory</li><li>Concatenative Speech: &#x3D; String bits and pieces of natual speech together</li><li>Articulary Synthesis:generation speech from a model of the vocal tract</li></ol><p>贝尔本人是个语音学家其实，父母也是。</p><p>貝爾在1885年4月15日，在一次實驗中把自己說話的聲音錄在一張紙音盤上，成為人類史上的第一張用聲音簽名的音盤。此紙音盤長時間被保存在<a href="https://zh.wikipedia.org/wiki/%E5%8F%B2%E5%AF%86%E6%A3%AE%E5%B0%BC%E5%AD%A6%E4%BC%9A">史密森博物館</a>（Smithsonian Museum），直到科學家以最新的資訊科技，在無需破壞脆弱音盤下而重現錄音。2013年4月，在跨越了130年後，外界終於可以聽到貝爾的原音，在公布的錄音中可以聽到貝爾以濃重<a href="https://zh.wikipedia.org/wiki/%E8%98%87%E6%A0%BC%E8%98%AD">蘇格蘭</a><a href="https://zh.wikipedia.org/wiki/%E5%8F%A3%E9%9F%B3_(%E7%A4%BE%E6%9C%83%E8%AA%9E%E8%A8%80%E5%AD%B8)">腔調</a>數著連串數字，並在最後以：「聽聽我的聲音。──亞歷山大·格拉漢姆·貝爾」結束了這段傳奇錄音。</p><p>贝尔曾经靠挤压一只狗来生成声音。</p><p>Klatt Talk被霍金一直在用，并且一直在用。</p><p>用LPC的合成器应用：<a href="https://speaknspell.co.uk/">https://speaknspell.co.uk/</a></p><p>课程：</p><p><a href="http://uofclinguistics.org/441">http://uofclinguistics.org/441</a></p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>语音学</title>
    <link href="/2022/03/28/Phonetics/"/>
    <url>/2022/03/28/Phonetics/</url>
    
    <content type="html"><![CDATA[<h1 id="1-为什么学语音学"><a href="#1-为什么学语音学" class="headerlink" title="1. 为什么学语音学"></a>1. 为什么学语音学</h1><p>虽然说口音不会影响我们的交流，但是长期与发音相对不“标准”的人对话会很“累”。</p><p>Unstressed Syllabus –&gt; Schwa, 我们也叫netural vowel, 中文就是阳音，倒写的一个小写的e。</p><p><strong>（两个名词）复合名词，后面被修饰的名词没有重音。这几乎是一个普遍原则！</strong></p><p>Syntax： putting the words in the right orders and right endings, 语法学，组成一个句子, 乔姆斯基</p><p>semantics:    语意学, meanings of the word, </p><p>pragmatics：语用学，敬语之类的。研究“谢谢”。</p><p>morphology：构词学&#x2F;形态学， 就是研究词的词性和构成和syntax有很多重合，like, likelihood, liked, likeness…比如词缀词根。。。</p><p>phonology: 声韵学，主要研究phoneme</p><p>phonetics：语音学，关注物理意义概念，它和phonology的交叉很多。</p><p>psycholinguistic：心理语言学</p><p>sociolinguistics：社会语音学，经济，种族。。。</p><p>computational linguistics：计算语言学</p><p>applied linguistics：很多时候是将语言学用在教育上</p><h1 id="2-语音学分类"><a href="#2-语音学分类" class="headerlink" title="2. 语音学分类"></a>2. 语音学分类</h1><h2 id="2-1-articulary-phonetics-（发音语音学）"><a href="#2-1-articulary-phonetics-（发音语音学）" class="headerlink" title="2.1 articulary phonetics （发音语音学）"></a>2.1 articulary phonetics （发音语音学）</h2><h2 id="2-2-acoustic-phonetics-（声学语音学）"><a href="#2-2-acoustic-phonetics-（声学语音学）" class="headerlink" title="2.2 acoustic phonetics （声学语音学）"></a>2.2 acoustic phonetics （声学语音学）</h2><h2 id="2-3-auditory-phonetics-（听觉语音学）"><a href="#2-3-auditory-phonetics-（听觉语音学）" class="headerlink" title="2.3 auditory phonetics （听觉语音学）"></a>2.3 auditory phonetics （听觉语音学）</h2><h2 id="2-4-experimental-phonetics-（实验语音学）"><a href="#2-4-experimental-phonetics-（实验语音学）" class="headerlink" title="2.4 experimental phonetics （实验语音学）"></a>2.4 experimental phonetics （实验语音学）</h2><p> 让机器说话最难的地方就是timming，我们人耳对timming极度敏感。</p><p>airstream mechanism：</p><p>phonetician types：</p><p>我们什么时候叫没有重音？Destress<br>With a low even pitch. 低频调，flat tone</p><p>Ton：一吨，嗯，舌头要点上去，和疼爱的疼差不多<br>tongue：舌头，<br>tone：音调，</p><p>sore &amp; sour</p><p>Continuation rise：句子的末尾我们需要降下来表示我们说话结束了。</p><p>compound stress</p><p>Air from our lung is the mostly the source of the speech, which is wind.</p><p>Contrast Stress: 有对立关系的要放重音。</p><p>Tonic Stress：The final stress of an utterance is very high.</p><p>Eg. I am going to the store.<br>这个时候 store就会很高。</p><p>Thought group：就是有连贯性的一段话。逻辑上有连贯性的话，我们会有continuation rise效应，当一段话意犹未尽的话，就是最后末尾是high pitch我们叫这个tonic stress，然后a drop，最后是a little rise。</p><p>Stress timing &amp; Syllabus Timing：<br>这不是一个绝对的现象，但是有效。<br>英语有重音和非重音，这样听起来有重点。不像法语，词与词之间的timing非常靠近。一般来说，重音部分的时间会相比较于非重音的时间要长。</p><p>大部分现象是重音时间长，非重音时间短。</p><p>但是我们总是希望重音与重音之间的时间不会差很多，有一种大致一样的节奏。如果中间有非常多的非重音，我们会压缩非重音部分，然后反之同理。如果没有的话，比如 a big black bear, 我们就会停顿！！！如果发现连续的content word都有重音通常，中间一大堆的重音节，所以我们就必须在之中放停顿了，一般是均等地加上时间，保证停顿的节拍是均匀的。</p><p>一般叫vocal chords就是声带，但是语音学里面我们叫它vocal fold，就是两片肉在一块开合。</p><p>Phonecian包括voiced：浊音，voiceless：清音等。<br>发声的时候喉咙会震动一般就是浊音，反之为清音。对voiced sound，我们的vocal folds会并拢和震动。 但是像是清音，我们的vocal fold就是打开的状态，我们就是单纯地快速呼出声音。</p><p>我们的鼻腔里面会有海绵组织，因为海绵组织（sponge tissue）在一定程度上可以吸收生意，所以通过鼻腔的声音一般都会有点闷闷的。</p><p>人的嗓子大部分情况下会一秒钟振动两百下，男生可能也就160左右，（CPS）cycles per second。</p><p>口腔是共鸣腔。Air to be pushed out to drive the speech, we can call it airstream.</p><p>Vocal fold声带是有两片的，只有它开开合合的状态才能发声。如果只有一片的话 </p><p>像是咽喉炎，可能整个声带都会被截除，像是吸烟喝酒或者嚼槟榔之类的。如果没有声带的话可以用辅助发言的机器，或者像是esophageal speech，食道，用食道来发音，运气讲话。声音出来就像气泡一样，从我们的肺部出来，靠我们的声带一开一合，切成很多气泡一样。</p><p>Velum降低放松，可以呼吸进新鲜空气，从鼻子呼出空气。几个名字叠在一起，找最相近的两个先处理。多次讲过的信息，那个stress就会相应的少点。</p><p>长短元音如何区分？</p><p>对于英式英语来说，长元音一般时间长点，短的一般也短。</p><p>但是对于美式来讲，非常混乱，和时间关系已经不多了。<strong>Short Vowel can not in the open syllabus</strong>，像是bi这就不可能。比如说bit，他就是短元音，因为短元音只能出现在闭音节里面假如我们把t去掉，而bi这个词不可能存在。如果一个音在开音节和闭音节中都可以出现，那么就是长音，反之如果只能在闭音节里面那就是短音。</p><p><strong>闭音节 closed syllabus：</strong></p><p>在元音之后有个辅音。比如说beat，bit之类的</p><p>舌头的前后变化就可以决定一个音的“质量”quality。就是音的内容。就是音色。</p><p>IPA的规则是one symbol，one sound。</p><p>A minmal pair: is two words that have different meanings but differ from each other in only one sound. And IPA solution: only captures <strong>constractive</strong> differences between sounds.理论上IPA就是关系到音和词的意思不能混了，要保证一个音一个符号。信达雅，IPA解决的是信的问题。A phoneme is a constractive sound in a language. It maybe used to distinguish between words in minimal pairs. </p><p>Allophones are phonetic variants of a phoneme, different allophones often occur in specific contexts. </p><figure class="highlight tex"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><pre><code class="hljs tex"><span class="hljs-built_in">$</span>t<span class="hljs-built_in">^</span>&#123;h&#125;<span class="hljs-built_in">$</span> And <span class="hljs-built_in">$</span>t<span class="hljs-built_in">$</span>  That is aspirated t, this always in the top, which always have more sound pressure.<br></code></pre></td></tr></table></figure><p>Transcriptions 有两种：1. broad 2. Narrow</p><ol><li>broad只包括constructive sounds（phoneme）</li><li>narrow的话会包含更多的细节，我们会精细到phone这个量级。这个时候我们就会用到很多aspiration符号，区分同素异形体之类的。</li></ol><p>Contractive sounds and a minimal pair like pit vs. bit ~&#x2F;p&#x2F; vs. &#x2F;b&#x2F;</p><p>Phonetic transcriptions of speech are <strong>always</strong> abstract.</p><p>如果是正式的IPA的话，我们会用[]括起来，如果不是的话，我们就可以直接是&#x2F;&#x2F;就行了。</p><p>Schwa: [ə] only appeared in unstressed syllabus, you can just rush through it and quickly get into the stressed syllabus. </p><p>• A stressed syllable may be denoted by a vertical dash immediately preceding the stressed syllable. • Examples of “contrast”: </p><p>• [ˈkhɑntɻæst] (N)</p><p> • [kənˈt hɻæst] (V)</p><p>This can only happen with [n], [m], [l] and [ɻ].When this happens, the consonant is said to be syllabic and is denoted with a small vertical dash underneath.</p><p>‘chasm’ [ˈkhæzm̩] ‘button’ [ˈbʌʔn]̩ ‘eagle’ [ˈigl̩] ‘feature’ [ˈftʃ͡ɻ]</p><p>尤其是当什么辅音在最后面但是有发音，但是又没有schwa的情况。</p><p>The larynx consists of two “vocal folds” which may be opened and closed.</p><ol><li><p>open : air passes cleanly through(<strong>voiceless</strong> sound)</p></li><li><p>closed: air does not pass through (no sound)</p></li><li><p>lightly brought toghther: vocal folds vibrate in passing air (&#x3D;<strong>voiced</strong> sound)</p></li></ol><p>Laryngosocopy &amp; fibroscopy</p><p>Just for the record, the diacritic for a very short segment is: [ ̆] (as in [ə̆ˈbəʊt]!) 很多时候schwa非常短会加这个。</p><p>Consonants at the ends of words are sometimes devoiced. • Voicelessness is denoted with the [ ̥] diacritic. </p><p>• ‘lose’ [luːz ̥] [luːs] ‘peas’ [phiːz]</p><p>Also for the record, the diacritic for voicing is: [ ̬] </p><p>• As in, maybe, [phis] (‘peace’)</p><p>stop&#x2F;plosive &#x3D; complete closure stops the airflow </p><p>fricative &#x3D; narrow closure that creates turbulence in the airflow. </p><p>Vowel articulations can be characterized along four dimensions:</p><ol><li><p>Height of the tongue (high, mid, low)</p></li><li><p>Front-back (front, central, back)</p></li><li><p>Roundness (rounded vs. unrounded)</p></li><li><p>Tenseness (tense&#x2F;lax)</p></li></ol><p>Air Pressure: from areas of high pressure to low pressure.</p><p><strong>Boyle’s Law:</strong> The pressure of the gas in a chamber is inversely proportional to the volume of the gas in the chamber: Pressue &#x3D; constant value &#x2F; volume of the chamber</p><p>Pressure can be increased or decreased by changing the volume of the chamber. </p><ol><li>Decrease the chamber &#x3D;&gt; increase the pressue</li><li>Increase the chamber &#x3D;&gt; decrease the pressure</li></ol><p>Source filter的优秀视频：<a href="https://www.youtube.com/watch?v=sdd4psnHRzI">https://www.youtube.com/watch?v=sdd4psnHRzI</a></p><p>glottal pulses&#x2F;voicing bar</p><p>It will not record the pitch from a voiceless sound, and messed up by obstruents (stops, fricatives, affricatives).</p><p><a href="https://www.accommodationforstudents.com/student-hall/3108-broadstone-hall-dublin">https://www.accommodationforstudents.com/student-hall/3108-broadstone-hall-dublin</a><br><a href="https://www.daft.ie/student-accommodation-for-rent/mapArea?showMap=true&amp;geoSearchType=BBOX&amp;top=53.35061662192729&amp;left=-6.301623132290558&amp;right=-6.215326742365363&amp;bottom=53.32547672914086&amp;mapView=true#1446982">https://www.daft.ie/student-accommodation-for-rent/mapArea?showMap=true&amp;geoSearchType=BBOX&amp;top=53.35061662192729&amp;left=-6.301623132290558&amp;right=-6.215326742365363&amp;bottom=53.32547672914086&amp;mapView=true#1446982</a></p><p>语音信号处理基础<br>Fundamentals of Speech Signal Processing：<br><a href="http://staff.ustc.edu.cn/~zhling/Course_SSP/">http://staff.ustc.edu.cn/~zhling/Course_SSP/</a></p><p>Rabiner的matlab：<br><a href="https://uk.mathworks.com/videos/matlab-apps-for-teaching-digital-speech-processing-90435.html">https://uk.mathworks.com/videos/matlab-apps-for-teaching-digital-speech-processing-90435.html</a></p><p>Rugers大学的Matlab包：<br><a href="https://uk.mathworks.com/matlabcentral/profile/authors/4428430">https://uk.mathworks.com/matlabcentral/profile/authors/4428430</a></p><p>Acoustics: Fundamental Frequency, Perceptual &#x3D; Pitch, Linguistics: Tone, they are always the same meaning.</p><p>Acoustics: Duration, Perceptual: length, Linguistics: Quantity</p><p>Three Quantifiable varibale: 1. Pitch, 2. Duration, 3. Loundness Also Quality</p><p>Power is just the square the amplitute: P &#x3D; A^2</p><p>In most cases, you opened your month bigger, than there will be more airflow coming in, so which means the higher intensity the sound would produce. </p><p>Some vowels are inherently longer than others: especially for a low vowel, if you open up your voice much more, so it just takes more time to get all the organs into the position, so that can triger longer time. </p><p>Tongue-pole hyposis: F0 is usally higer for high vowels than low vowels.</p><p>In most cases, stressed syllabus can be longer, louder, higher in f0. </p><p>The sinusoid (sinewave) components of a complex periodic wave &#x3D; harmonics. </p><p>For complex waves, the frequencies of the harmonics will always depends on the fundamental frequency of the wave.</p><p>Trilling of the vocal folds creates a complex wave, with a fundamental frequency. This complex wave consists a series of harmonics.</p><p>The spacing between the harmonics – in frequency – depends on the rate at which the vocal folds are vibrating (f0).</p><p>Haskins Labs Speech</p><p>The speaker module is like my vocal fold, the tube or cavity is my mouth, 声带震动产生声音，但是在从嘴发出的时候有些频率的声音会在腔内发生共振就会形成共振，主要是根据声带的长度，然后intesnify形成共振峰，但是有些不会。</p><p>formants: The resonant frquencies of a particular articulatory configuration.</p><p>F0 就是最早的peak hamonic尖峰。</p><p>Vowels may be defined in terms of their charactersic resonant frequencies (formants).</p><p>We can change the shape of the vocal tract to get different resonant frequencies.</p><p>Vowels are primarily distinguished by their first two formant frequencies: F1 and F2.</p><p>F1 corresponds to vowel height: lower F1 &#x3D; higher vowel, higher F1 &#x3D; lower vowel</p><p>F2 corresponds to front&#x2F;backness: higher F2 &#x3D; fronter vowel, lower f2 &#x3D; backer vowel.</p><p>The longer the vocal tract, the lower the formant frequecies. Resonant frequencies (formants) are primarily based on the length of the speaker’s vocal tract. (the length of the tube).</p><p>Men tends to have longer vocal tracts, so men mostly have lower frequencies than women. And female tends to have shorter vocal tracts, so have higher frequencies than men.</p><p>Women and men difference：</p><ol><li>Sound Source (depends of the length of the vocal folds)</li></ol><p>shorter in women &#x3D;&gt; higher average F0<br>longer in men &#x3D;&gt; lower average F0</p><ol start="2"><li>Sound Filter (depends of the length of the vocal tract)</li></ol><p>shorter in women &#x3D;&gt; higher formant frequencies<br>longer in men &#x3D;&gt; lower formant frequencies</p><p>Everybody‘s vowel space is different, a vowel space is defined by a speaker’s range of first formant (F1) and second formants (F2) frequencies.</p><p>Rounding lowers both the formant frequencies.</p><p>Voiced fricatives are more difficult to produce than voiceless fricatives.</p><p>Voiced stops are more difficult to produce than voiceless stops.</p><p>Since Voicing requires a pressure drop across the glottis.</p><h3 id="Pitch-Tracking"><a href="#Pitch-Tracking" class="headerlink" title="Pitch Tracking"></a>Pitch Tracking</h3><p>LTI Colloquium: We Speak In Order To Be Heard:</p><p><a href="https://www.youtube.com/watch?v=rpXR8Z6pudo">https://www.youtube.com/watch?v=rpXR8Z6pudo</a></p><p>Matlab UCL:<br><a href="https://www.phon.ucl.ac.uk/courses/spsci/matlab/">https://www.phon.ucl.ac.uk/courses/spsci/matlab/</a></p><p>PLIN0065 Intermediate Phonetics:<br><a href="https://www.phon.ucl.ac.uk/courses/plin0065/week8.php">https://www.phon.ucl.ac.uk/courses/plin0065/week8.php</a></p><p>语音与言语科学重点实验室<br><a href="http://paslab.phonetics.org.cn/">http://paslab.phonetics.org.cn/</a></p><p>Listen Lab 明尼苏达：<br><a href="http://www.mattwinn.com/Research.html">http://www.mattwinn.com/Research.html</a></p><p>语音学宝箱：<br><a href="https://sites.google.com/site/speechsciencetools/home/software-resources">https://sites.google.com/site/speechsciencetools/home/software-resources</a></p><p>北马其顿：<br><a href="https://speech.feit.ukim.edu.mk/en/">https://speech.feit.ukim.edu.mk/en/</a></p><p>system “Speak Macedonian” ：</p><p>James M. Hillenbrand： <a href="https://homepages.wmich.edu/~hillenbr/">https://homepages.wmich.edu/~hillenbr/</a></p><p>DSP: <a href="https://archive.org/details/academictorrents_43d881e5128841876104742314ccd9851901f460">https://archive.org/details/academictorrents_43d881e5128841876104742314ccd9851901f460</a></p><p>Inverse Filtering: <a href="http://www.siltanen-research.net/IPexamples/gif">http://www.siltanen-research.net/IPexamples/gif</a></p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>Hexo Tutorials</title>
    <link href="/2022/03/23/Hexo-Tutorials/"/>
    <url>/2022/03/23/Hexo-Tutorials/</url>
    
    <content type="html"><![CDATA[<p>#1. What is Hexo<br>Hexo is a kind of blog architecure for us to easily deploy, also, it is very convinient for us to realize it with our Github pages.</p><p>#2. How to install Hexo<br>#2.1 Install Node.js</p><p><img src="/img/nodejs.png" alt="nodejs"></p><img src="/2022/03/23/Hexo-Tutorials/nodejs.jpeg" class title="This is an test image"><p>There are three commands which will be used everyday:</p><h1 id="Daily-Commands"><a href="#Daily-Commands" class="headerlink" title="Daily Commands"></a>Daily Commands</h1><figure class="highlight bash"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></div></td><td class="code"><pre><code class="hljs Bash"><br>hexo clean       <span class="hljs-comment"># this is for cleaning the database</span><br>hexo g <br><span class="hljs-comment">#or </span><br>hexo generate  <span class="hljs-comment"># this is to generate the website with the latest updation</span><br><br><br>hexo d<br><span class="hljs-comment"># or</span><br>hexo deploy      <span class="hljs-comment"># deploy your webiste into your github repository</span><br><br><br>hexo new <span class="hljs-string">&quot;the_post_name_you_want_to_add_in&quot;</span><br><br><br><br>hexo cl &amp;&amp; hexo g &amp;&amp; hexo d  <span class="hljs-comment"># Just deploy totally into your github </span><br><br></code></pre></td></tr></table></figure>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>Kaldi Notes</title>
    <link href="/2022/03/23/Kaldi-Notes/"/>
    <url>/2022/03/23/Kaldi-Notes/</url>
    
    <content type="html"><![CDATA[<h1 id="1-Introductin"><a href="#1-Introductin" class="headerlink" title="1. Introductin"></a>1. Introductin</h1><p>Kaldi has a lot of examples in its projects.There are two necessary raw materials for us to train the model:</p><ol><li><strong>.wav file</strong></li><li><strong>labelled .txt</strong></li></ol><p>We need four necessary elements in Kaldi! We call it <strong>“HCLG.fst”</strong>, we can make speech recognition from these core file. Acutally, just like we are building a map, and we just decode all the paths from there in order to get the prediction results. The underneath idea just like from the typology from the mathematics.<br>We are using Viterbi algorithm to decoding our HCLG.fst. The exact name should be token passing method, which is a kind of variant algotithm of Viterbi.</p><h2 id="1-1-Audio-Corpus"><a href="#1-1-Audio-Corpus" class="headerlink" title="1.1 Audio Corpus"></a>1.1 Audio Corpus</h2><p>In kaldi, 1 frame is 10ms. For some front work, it always like 24ms for one frame. For a workable dataset, we at least need 2000 hrs data. </p><h2 id="1-2-Labelled-Text-Processing"><a href="#1-2-Labelled-Text-Processing" class="headerlink" title="1.2 Labelled Text Processing"></a>1.2 Labelled Text Processing</h2><h3 id="1-2-1-About-Encoding-and-Decoding"><a href="#1-2-1-About-Encoding-and-Decoding" class="headerlink" title="1.2.1 About Encoding and Decoding"></a>1.2.1 About Encoding and Decoding</h3><p>Before we really get into the world of Kaldi, we need to know the character decoding and encoding standard. So we need to know the basics of the UTF-8 &amp; Ascii. </p><p>As we knew there can be various languages in this world other than English, we need to make it more accesible to encode and then transmit. Different countries can have different kinds of encoding and decoding standards, this can be a big burden of the communication.Thus, people created the UTF-8 to unify the standards in all of the world, so different countries do need to worry about the discontinuity of the language communication.</p><p>We can just run this before head into the shell, so we can manipulate the Chinese or any other languages’ characters in Python in linux system.</p><figure class="highlight bash"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><pre><code class="hljs Bash"><span class="hljs-built_in">export</span> PYTHONIOENCODING=utf-8<br></code></pre></td></tr></table></figure><p>In UNIX, we can firstly check the file’s encoding format by:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs Bash">file ../..txt<br></code></pre></td></tr></table></figure><p>If it is UTF-16 Little Endian or other formats, we can just convert it into UTF-8 by:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs Bash">iconv -l UTF-16LE -t UTF-8 ../.../...<br></code></pre></td></tr></table></figure><p>Eg. there has a <strong>dir</strong> with many .txt files in UTF16 which in <em>local&#x2F;data</em>:</p><p>Here are the standard manipulation:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs Bash"><span class="hljs-comment"># firstly, we make a new dir and make sure put in all the manipulated data in this dir</span><br><span class="hljs-built_in">mkdir</span> <span class="hljs-built_in">local</span>/audio_data_utf8<br><br><span class="hljs-comment"># then we do a loop to put all the data in local/data to local/audio_data_utf8</span><br><br><span class="hljs-keyword">for</span> x <span class="hljs-keyword">in</span> <span class="hljs-built_in">local</span>/data/*;<br><span class="hljs-keyword">do</span> <br>&gt; y=`<span class="hljs-built_in">echo</span> <span class="hljs-variable">$x</span> | sed <span class="hljs-string">&#x27;s|data|audio_data_utf8|&#x27;</span>`;<br><span class="hljs-comment"># &gt; echo $y      just preview the output</span><br><span class="hljs-comment"># &gt; done </span><br><span class="hljs-comment"># transform all &quot;x&quot; utf16 files into utf8</span><br>iconv -f UTF-16LE -t UTF-8 <span class="hljs-variable">$x</span> &gt; <span class="hljs-variable">$y</span>;<br><span class="hljs-keyword">done</span><br></code></pre></td></tr></table></figure><p>other notes</p><p>The liux and windows files are not totally exchangeable, especially when we operate the .txt files on those two different kinds of machines.</p><p>especially we can see some codes shows the dissimilarities like: <feff>.</feff></p><p>we can use dos2unix tool to do the convertion:<br>After we did wget install dos2unix, then we can just do:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs Bash">dos2unix the_file_I_want_do_conversion.txt<br></code></pre></td></tr></table></figure><h3 id="1-2-2-Text-washing-prepare-the-data"><a href="#1-2-2-Text-washing-prepare-the-data" class="headerlink" title="1.2.2 Text washing(prepare the data)"></a>1.2.2 Text washing(prepare the data)</h3><p>But before we launch the test, we need to firstly do the text washing.</p><p>We need to prpare the data and do the data cleaning from the data_path directory<br>def pre_data(data_path):</p><h4 id="1-2-2-1-Regular-Expression-this-is-always-the-first-step"><a href="#1-2-2-1-Regular-Expression-this-is-always-the-first-step" class="headerlink" title="1.2.2.1 Regular Expression, this is always the first step"></a>1.2.2.1 Regular Expression, this is always the first step</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs Python"><span class="hljs-string">&#x27;&#x27;&#x27;</span><br><span class="hljs-string">This is core processing function, we mostly use Regular Expression here.</span><br><span class="hljs-string">Here is just a sample code, that we need to deal with: abrabic numbers, if its number, then there is no need to do segment, just replace it with space one by one. </span><br><span class="hljs-string"></span><br><span class="hljs-string">input：&quot;一二三五六&quot;</span><br><span class="hljs-string">output：&quot;一 二 三 五 六&quot;</span><br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br><br>```Python<br><span class="hljs-keyword">import</span> re<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">solve_data</span>():<br><span class="hljs-comment"># Delete &quot;()&quot;</span><br><span class="hljs-comment"># detect Chinese characters(\u4e00-\u9fa5) from a-z, A-Z, 0-9, &quot;.&quot;. It will catch the sentences with those elements.</span><br>a = re.findall(<span class="hljs-string">&#x27;[\u4e00-\u9fa5a-zA-Z0-9 .]+&#x27;</span>, data, re.S)<br><span class="hljs-comment">#print(&quot;&quot;.join(a))</span><br><span class="hljs-keyword">return</span> <span class="hljs-string">&quot; &quot;</span>.join(a)<br><span class="hljs-keyword">pass</span><br><br><span class="hljs-comment"># save the results into a new &quot;solve_data&quot; path</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">pre_data</span>(<span class="hljs-params">data_path+<span class="hljs-string">&quot;solve_data&quot;</span></span>):<br>data = []<br><span class="hljs-keyword">with</span> <span class="hljs-built_in">open</span>(data_path, <span class="hljs-string">&quot;w&quot;</span>, encoding=utf-<span class="hljs-number">8</span>) <span class="hljs-keyword">as</span> file:<br><span class="hljs-comment"># loop all the lines</span><br><span class="hljs-keyword">for</span> line <span class="hljs-keyword">in</span> data:<br>file.writelines(<span class="hljs-built_in">str</span>(line)+<span class="hljs-string">&quot;\n&quot;</span>)<br><span class="hljs-keyword">pass</span><br><span class="hljs-keyword">pass</span><br></code></pre></td></tr></table></figure><p>After we get our target, we need to set the processing functions.</p><h4 id="1-1-1-2-Replace-numbers-into-words"><a href="#1-1-1-2-Replace-numbers-into-words" class="headerlink" title="1.1.1.2 Replace numbers into words"></a>1.1.1.2 Replace numbers into words</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs Python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">replace_num</span>(<span class="hljs-params">data</span>)<br>data.replace(<span class="hljs-string">&quot;.&quot;</span>, <span class="hljs-string">&quot;dot&quot;</span>)<br>data.replace(<span class="hljs-string">&quot;0&quot;</span>, <span class="hljs-string">&quot;zero&quot;</span>)<br>data.replace(<span class="hljs-string">&quot;1&quot;</span>, <span class="hljs-string">&quot;one&quot;</span>)<br>data.replace(<span class="hljs-string">&quot;2&quot;</span>, <span class="hljs-string">&quot;two&quot;</span>)<br>data.replace(<span class="hljs-string">&quot;3&quot;</span>, <span class="hljs-string">&quot;three&quot;</span>)<br><span class="hljs-comment"># .......</span><br></code></pre></td></tr></table></figure><h4 id="1-1-1-3-Segment"><a href="#1-1-1-3-Segment" class="headerlink" title="1.1.1.3 Segment"></a>1.1.1.3 Segment</h4><p>We need to enterpret the text file to phones, the tools we need is lexicon, which is just like the dictionary. So in this way, we need to segement the words, and according to our prior knowledge from our dictionary, so we can invert the segmented words into the phones. This step is typically used for the language like Chinese, since for Chinese, the word’s stop is not just like we put a space there, but we need to segment it manually. For Chinese, we mostly use Jieba to segement the sentences into words. </p><p>Here are the preview of the results should be:<br>input：”今天是一个好日子”<br>output：”今天 是 一个 好 日子”</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs Python"><span class="hljs-keyword">import</span> jieba<br><br><span class="hljs-comment"># Claim the function for segmenting</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">segment_item</span>(<span class="hljs-params">data</span>):<br><span class="hljs-keyword">return</span> <span class="hljs-string">&quot; &quot;</span>.join(jieba.cut(data))<br><span class="hljs-keyword">pass</span><br><span class="hljs-comment"># After we set this function we can combine into the previous saving files.</span><br><span class="hljs-comment"># save the file as nosegment </span><br><span class="hljs-keyword">with</span> <span class="hljs-built_in">open</span>(os.join(os.path.join(save_path, <span class="hljs-string">&quot;text.nosegement&quot;</span>)), <span class="hljs-string">&#x27;w&#x27;</span>, encoding = <span class="hljs-string">&#x27;utf-8&#x27;</span>) <span class="hljs-keyword">as</span> file:<br><span class="hljs-comment"># loop all the lines and save it one by one.</span><br><span class="hljs-keyword">for</span> item <span class="hljs-keyword">in</span> text:<br><span class="hljs-comment"># we firstly do the segment and then save it one by one</span><br>segmet_list = segement_item(item[<span class="hljs-number">1</span>])<br>file.writelines(item[<span class="hljs-number">0</span>] + <span class="hljs-string">&quot; &quot;</span> + segmet_list + <span class="hljs-string">&quot;\n&quot;</span>)<br><span class="hljs-keyword">pass</span> <br><br></code></pre></td></tr></table></figure><h4 id="1-1-1-4-Combine-into-a-whole-processing-structure"><a href="#1-1-1-4-Combine-into-a-whole-processing-structure" class="headerlink" title="1.1.1.4 Combine into a whole processing structure"></a>1.1.1.4 Combine into a whole processing structure</h4><p>Now after we did the regular expression and jieba. We just combine them together. </p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><code class="hljs Python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">jieba_cut_data</span>(<span class="hljs-params">data</span>):<br><br>data = replace_num(data)<br><span class="hljs-comment"># this is just for the normal case, we just need to cut the sentences</span><br><span class="hljs-comment"># cut the words with &quot; &quot; one space, and replace the &quot;  &quot;(two spaces) into only one space.</span><br>data = <span class="hljs-string">&quot; &quot;</span>.join(jieba.cut(data)).replace(<span class="hljs-string">&quot;  &quot;</span>, <span class="hljs-string">&quot; &quot;</span>))<br><br><br><span class="hljs-comment"># these are the needs for unusual cases, which we dealt before in the RE section, we already found out the words with those elements we want to handle with. Now, it is time for us to deal with them. If there is all numbers, so we just do not split the words, like &quot;一二三四五&quot;.</span><br>is_cut =  <span class="hljs-literal">True</span><br><br><br><br><span class="hljs-comment"># here if the scenario is TRUE, which means there is a element in there, if all are numbers it will become [True, True, True, True, True, ... True, True], in that case, it will be &quot;is_cut&quot; ture. Not in, is not return anymore.</span><br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br><span class="hljs-string">input:  这是 学习 笔记</span><br><span class="hljs-string">output: [], which is an empty list</span><br><span class="hljs-string"></span><br><span class="hljs-string">input:  这是一本学习笔记本卖两块</span><br><span class="hljs-string">output: [  Ture,         True], sum this list we got 2, but not equals to the previous list length, so we do not process it.</span><br><span class="hljs-string"></span><br><span class="hljs-string">input:  一二三四五</span><br><span class="hljs-string">output: [Ture, Ture, Ture, Ture, True], sum this list we got 5, equals to the previous list length, so we process it.</span><br><span class="hljs-string"></span><br><span class="hljs-string"></span><br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br><br><span class="hljs-keyword">if</span> <span class="hljs-built_in">sum</span>（[<span class="hljs-literal">True</span> <span class="hljs-keyword">for</span> item <span class="hljs-keyword">in</span> data <span class="hljs-keyword">if</span> item <span class="hljs-keyword">in</span> [<span class="hljs-string">&quot;零&quot;</span>], [<span class="hljs-string">&quot;壹&quot;</span>], [<span class="hljs-string">&quot;二&quot;</span>], [<span class="hljs-string">&quot;三&quot;</span>], [<span class="hljs-string">&quot;四&quot;</span>]， [<span class="hljs-string">&quot;五&quot;</span>]]）== !<span class="hljs-built_in">len</span>(data):<br>is_cut = <span class="hljs-literal">True</span><br><br><span class="hljs-comment"># here if the scenario is TRUE, not all the context are numbers. we just follow the normal way, cut it with jieba, and replace the two spaces into one space.</span><br><span class="hljs-keyword">if</span> is_cut:<br>data = <span class="hljs-string">&quot; &quot;</span>.join(jieba.cut(data)).replace(<span class="hljs-string">&quot;  &quot;</span>, <span class="hljs-string">&quot; &quot;</span>))<br><span class="hljs-keyword">else</span>：<br><span class="hljs-comment"># we process those context with full numbers.</span><br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br><span class="hljs-string">input:  一二三四五</span><br><span class="hljs-string">output: [一 二 三 四 五]</span><br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br>data = <span class="hljs-string">&quot; &quot;</span>.join(data)<br><span class="hljs-keyword">return</span> data<br><br><span class="hljs-keyword">pass</span><br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs python">data = []<br><span class="hljs-keyword">with</span> <span class="hljs-built_in">open</span>(data_path, <span class="hljs-string">&#x27;r&#x27;</span>, encoding = <span class="hljs-string">&#x27;utf-8&#x27;</span>) <span class="hljs-keyword">as</span> file:<br><span class="hljs-keyword">for</span> line <span class="hljs-keyword">in</span> file.readlines():<br><span class="hljs-comment"># print(line.strip(&quot;\n&quot;).strip()), preview the results to delete the &#x27;\n&#x27; together with the space.</span><br><span class="hljs-comment"># just append the data that once processed.</span><br><span class="hljs-comment"># bef_data here is the before data</span><br>bef_data = line.strip(<span class="hljs-string">&quot;\n&quot;</span>).strip()<br><span class="hljs-comment"># cut the sentences into words</span><br>bef_data = <span class="hljs-string">&quot; &quot;</span>.join(jieba.cut(bef_data))<br><span class="hljs-comment"># here we input the bef_data, after processed in solve_data() function to get the processed data</span><br>data.append(solve_data(bef_data))<br><span class="hljs-keyword">pass</span><br><span class="hljs-keyword">pass</span><br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs python"><br><br><span class="hljs-comment"># this is a magic function</span><br><span class="hljs-keyword">if</span> _name_== <span class="hljs-string">&#x27;_main_&#x27;</span>:<br>data_path = <span class="hljs-string">&quot;./.../.../&quot;</span><br>pre_data(data_path)<br><br></code></pre></td></tr></table></figure><h3 id="1-2-3-Dictionary"><a href="#1-2-3-Dictionary" class="headerlink" title="1.2.3 Dictionary"></a>1.2.3 Dictionary</h3><p>We need to get the lexicon.txt by running  get_lexicon.py.</p><p>dict includes:</p><ol><li><strong>lexicon.txt : word –&gt; phones</strong></li><li><strong>phone.txt&#x2F;nonsilence_phones.txt : all the phones</strong></li><li><strong>silence_phones.txt : SIL</strong></li></ol><p>We need two kinds of dictionaries.<br>1st. the lexicon.txt from the corpus to better train a n-gram model, in some words, the language model.<br>2st. the word-to-phones, we also need a reference lists from there, we need acoustic model. In this case, so we need a “BIG” dictionary.</p><p>In this step, we need to transform the words into phones, so we can align the words and train them.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-string">&#x27;&#x27;&#x27;</span><br><span class="hljs-string">This is the dictionary mostly for the acoustic training needs.</span><br><span class="hljs-string">去年  q v4 n ian2</span><br><span class="hljs-string">上去  sh ang4 q v4</span><br><span class="hljs-string">上去  sh ang4 q v5</span><br><span class="hljs-string"></span><br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">get_lexicon</span>(<span class="hljs-params">data_path</span>):<br><br><span class="hljs-comment"># set can reduce the duplications. The dictionary must be just a set. </span><br>lexicon = <span class="hljs-built_in">set</span>()<br><span class="hljs-keyword">with</span> <span class="hljs-built_in">open</span>(<span class="hljs-string">&quot;data_path&quot;</span>, <span class="hljs-string">&quot;w&quot;</span>, encoding = <span class="hljs-string">&quot;utf-8&quot;</span>) <span class="hljs-keyword">as</span> file:<br><span class="hljs-keyword">for</span> line <span class="hljs-keyword">in</span> file.readlines():<br><span class="hljs-comment">#print(line.strip(&quot;\n&quot;).strip().split(&quot; &quot;)), remove the \n and cut with the identifier from the SPACE &quot; &quot;</span><br>[lexicon.add(item) <span class="hljs-keyword">for</span> item <span class="hljs-keyword">in</span> line.strip(<span class="hljs-string">&quot;\n&quot;</span>).strip().split(<span class="hljs-string">&quot; &quot;</span>)]<br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br><span class="hljs-string">input:  这是一本学习笔记本卖两块</span><br><span class="hljs-string">output: [这是，一本， 学习， 笔记本， 卖， 两块],</span><br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br><br><br><span class="hljs-keyword">pass</span><br><span class="hljs-keyword">pass</span><br><span class="hljs-comment">#print(lexicon)</span><br><span class="hljs-comment"># save the lexicon</span><br><span class="hljs-keyword">with</span> <span class="hljs-built_in">open</span>(<span class="hljs-string">&quot;../.../lexicon.txt&quot;</span>, <span class="hljs-string">&quot;w&quot;</span>, encoding = <span class="hljs-string">&quot;utf-8&quot;</span>) <span class="hljs-keyword">as</span> file:<br><span class="hljs-keyword">for</span> item <span class="hljs-keyword">in</span> lexicon:<br>file.writelines(item + <span class="hljs-string">&quot;\n&quot;</span>)<br><span class="hljs-comment"># here are the estimated results.</span><br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br><span class="hljs-string">去年 </span><br><span class="hljs-string">上去  </span><br><span class="hljs-string">上去  </span><br><span class="hljs-string">一</span><br><span class="hljs-string">笔记本</span><br><span class="hljs-string">卖</span><br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br><span class="hljs-keyword">pass</span><br><span class="hljs-keyword">pass</span><br><span class="hljs-keyword">pass</span><br><br>get_lexicon(<span class="hljs-string">&quot;./.../temp&quot;</span>)<br><br></code></pre></td></tr></table></figure><p>Finally we can get the ID to words.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs Python"><br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br><span class="hljs-string"></span><br><span class="hljs-string">ID    [word1, word2, word3, ..., wordn]</span><br><span class="hljs-string">[&#x27;UDIOSPK1001SEN01&#x27;, &#x27;I, Love, Kaldi&#x27;]</span><br><span class="hljs-string">[&#x27;UDIOSPK1001SEN02&#x27;, &#x27;Me, too&#x27;]</span><br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">id2words</span>(<span class="hljs-params">data_path</span>):<br><br><span class="hljs-keyword">for</span> file_name <span class="hljs-keyword">in</span> os.listdir(data_path):<br><span class="hljs-keyword">if</span> fiel_name[-<span class="hljs-number">3</span>:<span class="hljs-number">0</span>] == <span class="hljs-string">&quot;txt&quot;</span>:<br><span class="hljs-keyword">continue</span><br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br><span class="hljs-string">...........</span><br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br><br></code></pre></td></tr></table></figure><p>Dictionary this is the dict file we need to manipulate, in data&#x2F;local&#x2F;dict directory</p><p>At the same time, here are the <em><strong>UNIX</strong></em> way:</p><p>we need to get the format like SPK_ID WAV_PATH</p><p>#AUDIOSPK1001 I Love Kaldi<br>#AUDIOSPK1002 Me too</p><p>Here we just create a .sh file called <em>generate_text_id.sh</em></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs Bash"><span class="hljs-meta">#! /bin/bash</span><br>spk_id = <span class="hljs-variable">$1</span>  <span class="hljs-comment">#$1 is your first variable</span><br><br><span class="hljs-built_in">exit</span> 0;<br><br></code></pre></td></tr></table></figure><p>Then we need to make it into a runable file:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs Bash"><span class="hljs-built_in">chmod</span> +x generate_text_id.sh <br></code></pre></td></tr></table></figure><p>And then we can run it again:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs Bash">./generate_text_id.sh SPK.txt<br><span class="hljs-comment"># it will just print itself</span><br>SPK.txt<br></code></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-meta">#! /bin/bash</span><br>spk_id = <span class="hljs-variable">$1</span>  <span class="hljs-comment">#$1 is your first variable</span><br><br><span class="hljs-comment"># echo spk_id, this will just print the first column</span><br>awk &#123;<span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%s %s\n&quot;</span>, <span class="hljs-variable">$spk_id</span>, <span class="hljs-variable">$1</span>)&#125;<span class="hljs-string">&#x27; $spk_id</span><br><span class="hljs-string"></span><br><span class="hljs-string">exit 0;</span><br></code></pre></td></tr></table></figure><h1 id="2-“The-Big-Four”"><a href="#2-“The-Big-Four”" class="headerlink" title="2. “The Big Four”"></a>2. “The Big Four”</h1><p>From the last chapter we already knew HCLG.fst includes H.fst, C.fst, L.fst, G.fs. </p><p>Here are the flowchart: from acoustic characteristics —&gt; phones —&gt; words —&gt; sentences.</p><p><strong>H.fst enables us to input the acoustics characteritics and return the phone.</strong></p><p><strong>L.fst enables us to input phones to word.</strong></p><p>How to get those four files can be the core idea of the kaldi ASR system. The ASR detection logic can be: acoustic features –&gt; H.fst –&gt; phones C.fst –&gt; L.fst + G.fst (linguistics) –&gt; words.</p><p>1. </p><p>​                    </p><h2 id="2-1-H-fst"><a href="#2-1-H-fst" class="headerlink" title="2.1 H.fst"></a>2.1 H.fst</h2><p>For H.fst, what we want is input the acoustic characteristics, output phones.</p><h3 id="2-1-1-Make-MFCC"><a href="#2-1-1-Make-MFCC" class="headerlink" title="2.1.1 Make MFCC"></a>2.1.1 Make MFCC</h3><p>After we run this script below, the Kalid will automatically generate 7 files:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs Bash">steps/make_mfcc.sh --nj 1 --mfcc-config=/root/data/kaldi_file/<br></code></pre></td></tr></table></figure><ol><li>conf: default param</li><li>data: the MFCC output, just like feats.scp</li><li>feats.scp  </li><li>frame_shift</li><li>log：some log files generated</li><li>utt2dur</li><li>utt2num_frames</li></ol><h4 id="2-1-1-1-feats-scp"><a href="#2-1-1-1-feats-scp" class="headerlink" title="2.1.1.1 feats.scp"></a>2.1.1.1 feats.scp</h4><p>The format of it can be like:</p><p><em>AUDIO_FILE_ID    Location_Directory_of_the_MFCC_Generated_in_AWK</em></p><p>The significance of this file is to tell us where the MFCC will be stored. All the MFCC features will be stored at AWK formats. AWK is binary forms, because it will save the space. </p><p>This is the preview of 13th MFCC: </p><p>AUDIO_ID</p><figure class="highlight dns"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs dns">[<span class="hljs-number">54.32323</span> -<span class="hljs-number">12</span>.<span class="hljs-number">8887</span> -<span class="hljs-number">2.12212</span>  <span class="hljs-number">3</span>.<span class="hljs-number">2322</span> ... -<span class="hljs-number">2.323232</span>  #<span class="hljs-number">13</span>th features for each frame<br><br><span class="hljs-number">4.323323</span> -<span class="hljs-number">11</span>.<span class="hljs-number">5887</span> -<span class="hljs-number">3.12312</span>   <span class="hljs-number">8</span>.<span class="hljs-number">2422</span> ... -<span class="hljs-number">4.323239</span><br><br><span class="hljs-number">5.332324</span> -<span class="hljs-number">10</span>.<span class="hljs-number">8877</span> -<span class="hljs-number">6.442212</span>  <span class="hljs-number">3</span>.<span class="hljs-number">2322</span> ... -<span class="hljs-number">7.223132</span> ]<br></code></pre></td></tr></table></figure><h4 id="2-1-1-2-frame-shift"><a href="#2-1-1-2-frame-shift" class="headerlink" title="2.1.1.2 frame_shift"></a>2.1.1.2 frame_shift</h4><p>The frame shift is just a param told us the frame shift time, if it is 10ms, then it will print 0.01, since 10ms &#x3D; 0.01s.</p><h4 id="2-1-1-3-utt2dur"><a href="#2-1-1-3-utt2dur" class="headerlink" title="2.1.1.3 utt2dur"></a>2.1.1.3 utt2dur</h4><p>This will show us every audio files’ durations.</p><p><em>AUDIO_FILE_ID      #Durations (s)</em></p><h4 id="2-1-1-4-utt2num-frames"><a href="#2-1-1-4-utt2num-frames" class="headerlink" title="2.1.1.4 utt2num_frames"></a>2.1.1.4 utt2num_frames</h4><p>This will told us every audio files’ frame numbers. Since we already know frame_shift time is 0.01s. Which means for every frame it needs 0.01s.</p><p><em>AUDIO_FILE_ID      #Number of frames</em></p><h4 id="2-1-5-Visualize-ark-file"><a href="#2-1-5-Visualize-ark-file" class="headerlink" title="2.1.5 Visualize ark file"></a>2.1.5 Visualize ark file</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs Bash">copy-feats ark:cmvn_kaldi_file.ark ark, t:cmvn_feat.ark.txt<br></code></pre></td></tr></table></figure><p>Here is how we visualize the ark file into the txt. After that we can preview the cmvn_ark.txt file.</p><h3 id="2-1-2-CMVN"><a href="#2-1-2-CMVN" class="headerlink" title="2.1.2 CMVN"></a>2.1.2 CMVN</h3><p>This operation is for solving one problem which is that we need to take into the different people’s diversities. Since we knew that for different people have different timbre. CMVN is for solving this problem.</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs Bash">egs/wsj/steps/compute_cmvn_stats.sh &lt;data_dir&gt;<br></code></pre></td></tr></table></figure><p>The following is where the CMVN tool belongs to. </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">steps/compute_cmvn_stats.sh ./kaldi_file<br></code></pre></td></tr></table></figure><p>Here we generated the CMVN in the kaldi_file directory. </p><p>After we visualized the .ark file from the kaidi_file directory to preview the .txt file.</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">copy-feats ark:cmvn_kaldi_file.ark ark, t:cmvn_feat.ark.txt<br></code></pre></td></tr></table></figure><p>We can know that for each frame, there have 13DMFCC params, so if we need to do CMVN, we need to caculate 2 params for each frame. So there will be every column has two params: average and variation. So there had 13 columns, so for each column we need 13*2 &#x3D; 26 CMVN params, which consists 13 averg and 13 var.</p><p>If we do not caring about the SPK, just focus on the audio content itslelf will be a big issue. Since as we know, we do need know the spk’s voice characteristics and this will affect our trainings,we need to take that bias into it. We will do “CMVN” here, this will be applied for prior distribution for male and female. The value between the “CMVN” is [0-1]. </p><h3 id="2-1-3-Generate-H-fst"><a href="#2-1-3-Generate-H-fst" class="headerlink" title="2.1.3 Generate H.fst"></a>2.1.3 Generate H.fst</h3><p> After we got CMVN, we already can generate the H.fst file. </p><h2 id="2-2-L-fst"><a href="#2-2-L-fst" class="headerlink" title="2.2 L.fst"></a>2.2 L.fst</h2><p>We input phones and output words. </p><p>For building those four elements, we need 4 files: 1. wav.scp, 2. text, 3. utt2spk, 4. spk2utt.</p><h3 id="2-2-1-wav-scp"><a href="#2-2-1-wav-scp" class="headerlink" title="2.2.1 wav.scp"></a>2.2.1 wav.scp</h3><p>Here is the format of those 4 files:</p><ol><li><strong>wav.scp: [audio id] –&gt; [file directory path name]</strong></li></ol><p>Here are the <em>python</em> way:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs Python"><span class="hljs-keyword">import</span> os<br><span class="hljs-comment">#The location of the audio directory</span><br>target_dir = <span class="hljs-string">&#x27;./../../&#x27;</span><br>save_path = <span class="hljs-string">&#x27;./../../&#x27;</span><br><br><span class="hljs-comment"># Loop all the audio resources</span><br>wav_scp = []<br><span class="hljs-keyword">for</span> file_name <span class="hljs-keyword">in</span> os.listdir(target_dir):<br><span class="hljs-comment"># Append all the .wav file into the list</span><br><span class="hljs-keyword">if</span> file_name[-<span class="hljs-number">3</span>:<span class="hljs-number">0</span>] == <span class="hljs-string">&quot;.wav&quot;</span>:<br><span class="hljs-comment"># Here we use &quot;.&quot; to split the file_name and use join to combine our directory address. We also can use &quot;os.path.join(target_dir + filename)&quot;. </span><br>wav_scp.append([file_name.split(<span class="hljs-string">&quot;.&quot;</span>)[<span class="hljs-number">0</span>], os.path.join(target_dir, filename)])<br><span class="hljs-keyword">pass</span><br><span class="hljs-keyword">pass</span><br><span class="hljs-comment"># we can check the output by print(wav_scp)</span><br><span class="hljs-comment"># Save wav_scp</span><br><span class="hljs-keyword">with</span> <span class="hljs-built_in">open</span>(os.path.join(save_path, wav.scp), <span class="hljs-string">&#x27;w&#x27;</span>, encoding = <span class="hljs-string">&#x27;utf-8&#x27;</span>) <span class="hljs-keyword">as</span> file:<br><span class="hljs-comment"># Loop all the items in wav.scp and save them one by one</span><br><span class="hljs-keyword">for</span> item <span class="hljs-keyword">in</span> wav.scp: <br>file.writelines(item[<span class="hljs-number">0</span>]+<span class="hljs-string">&quot; &quot;</span>+item[<span class="hljs-number">1</span>]+<span class="hljs-string">&quot;\n&quot;</span>)   <br><span class="hljs-comment">#Our output format should be:  filename target_dir filename</span><br>    <span class="hljs-keyword">pass</span><br><span class="hljs-keyword">pass</span><br></code></pre></td></tr></table></figure><p>The last step can be sorting the file name by vim:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs Unix">:sort<br></code></pre></td></tr></table></figure><p>The <em>UNIX</em> way:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># find all the wav_files name and their dir</span><br>find <span class="hljs-string">&#x27;./../../&#x27;</span> -iname <span class="hljs-string">&#x27;*.wav&#x27;</span> <br><span class="hljs-comment"># use find we can list all the .wav files&#x27; name, the &quot;i&quot; in &quot;-iname&quot; means not caring the upper or lower case of the characters.</span><br><br><span class="hljs-comment">#we can check it by printing the first line </span><br>find <span class="hljs-string">&#x27;./../../&#x27;</span> -iname <span class="hljs-string">&#x27;*.wav&#x27;</span> | <span class="hljs-built_in">head</span> -n 1<br><br><span class="hljs-comment"># then we can save the .wav file list into a temp place</span><br>find <span class="hljs-string">&#x27;./../../&#x27;</span> -iname <span class="hljs-string">&#x27;*.wav&#x27;</span> &gt; wav.scp.temp<br><br><span class="hljs-comment"># now we already got all the uttpath, but we still need the uttid</span><br><br><span class="hljs-built_in">cat</span> wav.scp.temp | awk - F <span class="hljs-string">&#x27;/&#x27;</span> <span class="hljs-string">&#x27;&#123;printf(&quot;%s_%s\n&quot;, $(NF-1), $NF)&#125; &#x27;</span>|sed <span class="hljs-string">&#x27;s|.wav||&#x27;</span> &gt; wav_id<br><span class="hljs-comment"># here we are using sed to remove all the &quot;.wav&quot; strings into &quot; &quot; || means &quot;&quot;, which is empty space</span><br><br><span class="hljs-comment"># we only need to combine the wav.scp.temp and wav_id, since there are all in great orders, so we can just do:</span><br><span class="hljs-comment"># preview the data: paste -d&#x27; &#x27; wav_id wav.scp.temp | head -n 1</span><br><span class="hljs-built_in">paste</span> -d<span class="hljs-string">&#x27; &#x27;</span> wav_id wav.scp.temp &gt; wav.scp<br><span class="hljs-comment"># now we can get all the wav.scp</span><br><br><br><br><br></code></pre></td></tr></table></figure><h3 id="2-2-2-Text"><a href="#2-2-2-Text" class="headerlink" title="2.2.2 Text"></a>2.2.2 Text</h3><ol start="2"><li><strong>text:    audio id –&gt; labelled file</strong></li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><code class="hljs Python"><span class="hljs-keyword">import</span> os<br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br><span class="hljs-string">From AUDIOSPK1001.txt get ID and &quot;I Love Kaldi&quot;</span><br><span class="hljs-string"></span><br><span class="hljs-string">AUDIOSPK1001 I Love Kaldi</span><br><span class="hljs-string">AUDIOSPK1002 Me too</span><br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br>target_dir = <span class="hljs-string">&quot;./.../.../&quot;</span><br><span class="hljs-comment"># This is the stored text file</span><br><br>save_path = <span class="hljs-string">&quot;./.../.../&quot;</span><br>text = []<br><br><br><span class="hljs-comment"># loop all the text file name in directory</span><br><span class="hljs-keyword">for</span> filename <span class="hljs-keyword">in</span> os.listdir(target_dir):<br><span class="hljs-comment"># only operate the file that ends with &quot;.txt&quot;</span><br><span class="hljs-keyword">if</span> filename[-<span class="hljs-number">4</span>:] != <span class="hljs-string">&quot;.txt&quot;</span>:<br><span class="hljs-keyword">continue</span><br><br><span class="hljs-comment"># read the file</span><br><span class="hljs-keyword">with</span> <span class="hljs-built_in">open</span>(os.path.join(target_dir, filename), <span class="hljs-string">&#x27;r&#x27;</span>, encoding=<span class="hljs-string">&quot;utf-8&quot;</span>)<span class="hljs-keyword">as</span> file:<br><span class="hljs-comment"># read line by line </span><br><span class="hljs-keyword">for</span> line <span class="hljs-keyword">in</span> file.readlines():<br><span class="hljs-comment"># Delete all &quot;\n&quot; and the the space</span><br>line = line.strip(<span class="hljs-string">&quot;\n&quot;</span>).strip()<br><span class="hljs-comment"># print(line.strip(&quot;\n&quot;)), we can print the text files all in one screen without the \n symbols.</span><br><br><span class="hljs-comment"># Get the filename with its contents</span><br>text.append([filename.split(<span class="hljs-string">&quot;.&quot;</span>)[<span class="hljs-number">0</span>], line])<br><br><span class="hljs-keyword">pass</span><br><span class="hljs-keyword">pass</span><br><span class="hljs-keyword">pass</span><br><br><br><span class="hljs-comment"># save the file as nosegment </span><br><span class="hljs-keyword">with</span> <span class="hljs-built_in">open</span>(os.join(os.path.join(save_path, <span class="hljs-string">&quot;text.nosegement&quot;</span>)), <span class="hljs-string">&#x27;w&#x27;</span>, encoding = <span class="hljs-string">&#x27;utf-8&#x27;</span>) <span class="hljs-keyword">as</span> file:<br><span class="hljs-comment"># loop all the lines and save it one by one.</span><br><span class="hljs-keyword">for</span> item <span class="hljs-keyword">in</span> text:<br>file.writelines(item[<span class="hljs-number">0</span>] + <span class="hljs-string">&quot; &quot;</span> + item[<span class="hljs-number">1</span>] + <span class="hljs-string">&quot;\n&quot;</span>)<br><span class="hljs-keyword">pass</span> <br><br><br><span class="hljs-built_in">print</span>(text)<br></code></pre></td></tr></table></figure><h3 id="2-2-3-utt2spk-audio-id-–-gt-SPK-id"><a href="#2-2-3-utt2spk-audio-id-–-gt-SPK-id" class="headerlink" title="2.2.3 utt2spk: audio id –&gt; SPK id"></a>2.2.3 <strong>utt2spk: audio id –&gt; SPK id</strong></h3><h3 id="2-2-4-spk2utt-SPK-–-gt-audio-id"><a href="#2-2-4-spk2utt-SPK-–-gt-audio-id" class="headerlink" title="2.2.4 spk2utt: SPK      –&gt; audio id"></a>2.2.4 <strong>spk2utt: SPK      –&gt; audio id</strong></h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br></pre></td><td class="code"><pre><code class="hljs Python"><span class="hljs-keyword">import</span> os<br><span class="hljs-comment"># The path of the audio resources</span><br>path_dir = <span class="hljs-string">&quot;./.../.../&quot;</span><br><br><br><span class="hljs-comment"># The final output path</span><br>save_path = <span class="hljs-string">&quot;./.../.../&quot;</span><br><br><br><br><span class="hljs-comment"># Save the final results</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">save_data</span>(<span class="hljs-params">data, file_name</span>):<br><span class="hljs-keyword">with</span> <span class="hljs-built_in">open</span>(os.path.join(target_file, file_name), <span class="hljs-string">&#x27;w&#x27;</span>, encoding = <span class="hljs-string">&quot;utf-8&quot;</span>) <span class="hljs-keyword">as</span> file:<br><span class="hljs-keyword">for</span> item <span class="hljs-keyword">in</span> data:<br><span class="hljs-comment"># save the item line in line</span><br>file.writelines(item)<br><span class="hljs-keyword">pass</span><br><span class="hljs-keyword">pass</span><br><span class="hljs-keyword">pass</span><br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br><span class="hljs-string">Audio file name: AUDIOSPK1001.wav</span><br><span class="hljs-string"></span><br><span class="hljs-string">AUDIOSPK1001 SPK1</span><br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">get_utt2spk</span>():<br><span class="hljs-comment"># For saving the final results</span><br>utt2spk = [] <br><span class="hljs-comment"># loop all the directories</span><br><span class="hljs-keyword">for</span> file_name <span class="hljs-keyword">in</span> os.listdir(path_dir):<br><span class="hljs-comment"># if the file itself is .wav file, we operate, others dismiss</span><br><span class="hljs-keyword">if</span> file_name[-<span class="hljs-number">4</span>:] == <span class="hljs-string">&quot;.wav&quot;</span>:<br><br><br><span class="hljs-comment"># Audio ID</span><br>utt = file_name.split(<span class="hljs-string">&quot;.&quot;</span>)[<span class="hljs-number">0</span>]<br><span class="hljs-comment"># SPK ID</span><br>spk = utt[-<span class="hljs-number">7</span>:-<span class="hljs-number">5</span>]<br><br><span class="hljs-comment"># Print(utt+ &quot; &quot; + spk + &quot;\n&quot;)</span><br><span class="hljs-comment"># Add into utt2spk</span><br>utt2spk.append(utt + <span class="hljs-string">&quot; &quot;</span> + spk + <span class="hljs-string">&quot;\n&quot;</span>)<br><span class="hljs-keyword">pass</span><br><span class="hljs-keyword">pass</span><br><span class="hljs-comment"># save the data</span><br>save_data(utt2spk, <span class="hljs-string">&quot;utt2spk&quot;</span>)<br><br><br><br><span class="hljs-comment"># set the function to get spk2utt</span><br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br><span class="hljs-string">Audio file name: AUDIOSPK1001.wav</span><br><span class="hljs-string"></span><br><span class="hljs-string">SPK1 AUDIOSPK1001 AUDIOSPK1002</span><br><span class="hljs-string">SPK2 AUDIOSPK2001 AUDIOSPK2001</span><br><span class="hljs-string">......</span><br><span class="hljs-string">dict&#123;</span><br><span class="hljs-string">&quot;SPK1&quot; : [AUDIOSPK1001, AUDIOSPK1002],</span><br><span class="hljs-string">&quot;SPK2&quot; : [AUDIOSPK2001, AUDIOSPK2002],</span><br><span class="hljs-string">......</span><br><span class="hljs-string">&#125;</span><br><span class="hljs-string"></span><br><span class="hljs-string"></span><br><span class="hljs-string"></span><br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">get_spk2utt</span>():<br>spk2utt = &#123;&#125;<br><span class="hljs-keyword">for</span> file_name <span class="hljs-keyword">in</span> os.listdir(path_dir):<br><span class="hljs-comment"># Delete a file</span><br><span class="hljs-keyword">if</span> file_name[-<span class="hljs-number">4</span>:<span class="hljs-number">0</span>] == <span class="hljs-string">&quot;.txt&quot;</span>:<br><span class="hljs-keyword">continue</span><br><span class="hljs-comment"># audio ID</span><br>utt = file_name.split(<span class="hljs-string">&quot;.&quot;</span>)[<span class="hljs-number">0</span>]<br><span class="hljs-comment"># SPK ID</span><br>spk = utt[-<span class="hljs-number">7</span>:-<span class="hljs-number">5</span>]<br><br><br><span class="hljs-comment"># If there has a SPK here, we just append</span><br><span class="hljs-keyword">if</span> spk <span class="hljs-keyword">in</span> spk2utt:<br>spk2utt[spk].append(utt)<br><span class="hljs-comment"># If there not have a SPK here, we just preset it as a list. </span><br><span class="hljs-keyword">else</span>:<br>spk2utt[spk] = []<br><span class="hljs-keyword">pass</span><br><br><span class="hljs-comment"># using print(spk2utt) to check</span><br><br><span class="hljs-comment"># final output list from the dict</span><br>write_spk2utt = []<br><span class="hljs-keyword">for</span> key <span class="hljs-keyword">in</span> spk2utt.keys():<br>write_spk2utt.append(<span class="hljs-built_in">str</span>(key)+<span class="hljs-string">&quot; &quot;</span>.join(spk2utt(key))+<span class="hljs-string">&quot;\n&quot;</span>)<br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br><span class="hljs-string">list = [&quot;A&quot;, &quot;B&quot;, &quot;C&quot;, &quot;D&quot;]</span><br><span class="hljs-string">print(&quot; &quot;.join(list))</span><br><span class="hljs-string">------------------------------------------------------</span><br><span class="hljs-string">A B C D</span><br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br><span class="hljs-keyword">pass</span><br><span class="hljs-comment"># save the output</span><br>save_data(write_spk2utt, <span class="hljs-string">&quot;spk2utt&quot;</span>)<br><span class="hljs-keyword">pass</span><br><br><br><br>get_spk2utt()<br>get_utt2spk()<br><br><br><br><br><br></code></pre></td></tr></table></figure><p>The difference between the utt2spk and the spk2utt is that, for utt2spk, there is only one-to-one relations instead of like spk2utt, there are one-to-multiple relation. So, in most cases, we only need either 3 or 4, because if we already got one, another one is also can be derived.</p><h3 id="2-2-5-Generate-run-sh-amp-get-L-fst"><a href="#2-2-5-Generate-run-sh-amp-get-L-fst" class="headerlink" title="2.2.5 Generate run.sh &amp; get L.fst"></a>2.2.5 Generate run.sh &amp; get L.fst</h3><p>The final step should be write a run.sh file to generate the L.fst file.</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs Bash"><span class="hljs-comment"># 1. generate the L.fst</span><br><br><span class="hljs-comment"># here we used prepare_lang.sh </span><br><span class="hljs-comment"># there are four params we input: </span><br><br><span class="hljs-comment">#1. the four files we prepared, fix_data_dir.sh ./local/dict</span><br><span class="hljs-comment">#   2. If there has the phones not in the dictionary, what it will be recognized as &#x27;SIL&#x27;</span><br><span class="hljs-comment">#   3. the temp files</span><br><span class="hljs-comment">#   4. F.fst</span><br><br><br>utils/prepare_lang.sh ./local/dict <span class="hljs-string">&#x27;SIL&#x27;</span> ./temp/01/ L/lang<br><br><br><br><br></code></pre></td></tr></table></figure><h3 id="2-2-6-Visualize-the-L-fst-file"><a href="#2-2-6-Visualize-the-L-fst-file" class="headerlink" title="2.2.6 Visualize the L.fst file"></a>2.2.6 Visualize the L.fst file</h3><p>we can print the .fst here to see the whole results.</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs Bash">fstprint ../lang/L.fst<br></code></pre></td></tr></table></figure><p>Save the log of the L.fst into L.txt.</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs Bash">fstprint ../lang/L.fst &gt; L.txt<br></code></pre></td></tr></table></figure><p>After we generated the L.fst, we can get the estimation from there. All the phones and words will get an ID. </p><p>  phone_ID   word_ID     input: phone    output: word    probabilities<br>    0           1            <eps>            <eps>         0.6878887788<br>    1           2            EY1_S                A           0.7987897897<br>  …..<br>Here are the .fst format: </eps></eps></p><p>We can use fstdraw to draw the decoding graph.</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs Bash">fstdraw --isymbols=../lang/phones.txt --osymbols=../lang/words.txt ../lang/L.fst  &gt; L.dot<br></code></pre></td></tr></table></figure><p>We can firstly output a L.dot file then we can just draw it. So we can use .dot file to generate it into a jpg file.</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs Bash">apt wget install ghostscript<br>apt wget install graphviz<br>dot -Tjpg L.dot &gt; L.jpg<br></code></pre></td></tr></table></figure><h2 id="2-3-C-fst-（Context）"><a href="#2-3-C-fst-（Context）" class="headerlink" title="2.3. C.fst （Context）"></a>2.3. C.fst （Context）</h2><p>In here, means the phones can be affected by the phones next to it</p><p>Input phones and output phones. </p><h2 id="2-4-G-fst-just-n-gram-get-lm-sh"><a href="#2-4-G-fst-just-n-gram-get-lm-sh" class="headerlink" title="2.4 G.fst : just n-gram  get_lm.sh"></a>2.4 G.fst : just n-gram  get_lm.sh</h2><p>we can download srilm. </p><p>Language model is very easy, we just need to prepare the corpus line by line and make sure cutted the sentences.</p><p>G.fst actually is G.fsa, fsa is a very typical kind of fst, it is a kind of reciever, which inputs equals to output.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs Python"><span class="hljs-comment"># the name can be set as: text.lm</span><br><br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br><span class="hljs-string"></span><br><span class="hljs-string">[word1, word2, word3, ..., wordn]</span><br><span class="hljs-string">[&#x27;I, Love, Kaldi&#x27;]</span><br><span class="hljs-string">[&#x27;Me, too&#x27;]</span><br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br><br></code></pre></td></tr></table></figure><p>Here we just introduce UNIX way to do it. We will use awk. </p><p>Awk is very fast then python, if there is efficiency needs.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs Python"><br><span class="hljs-comment"># get the corpus input we need to process </span><br>file_name = <span class="hljs-string">&#x27;/root/data/.../...&#x27;</span> <br><br><span class="hljs-comment"># read the file</span><br><span class="hljs-keyword">with</span> <span class="hljs-built_in">open</span>(file_name, <span class="hljs-string">&#x27;r&#x27;</span>, encoding = <span class="hljs-string">&#x27;utf-8&#x27;</span>) <span class="hljs-keyword">as</span> file:<br><span class="hljs-keyword">for</span> item <span class="hljs-keyword">in</span> file.readlines():<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot; &quot;</span>.join(item.strip(<span class="hljs-string">&quot;\n&quot;</span>)strip().split(<span class="hljs-string">&quot; &quot;</span>)[<span class="hljs-number">1</span>:]))<br><span class="hljs-keyword">pass</span><br><span class="hljs-keyword">pass</span><br><br><br><br><span class="hljs-comment"># we can just get [word1, word2, word3, ..., wordn]</span><br></code></pre></td></tr></table></figure><p>We will use the AWK to do the same thing.</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs Bash"><span class="hljs-comment"># here are the original idea</span><br><span class="hljs-comment">#[AUDIOSPK1001 &#x27;I, Love, Kaldi&#x27;]</span><br><span class="hljs-comment">#[AUDIOSPK1001 &#x27;Me, too&#x27;]</span><br><span class="hljs-comment"># we can just firstly test it with print in awk</span><br>awk <span class="hljs-string">&#x27;&#123;print $1&#125;&#x27;</span> text <span class="hljs-comment"># here &quot;text&quot; means the txt file you want to manipulate, her is $1 means we print the first colum. It will look like:</span><br><span class="hljs-comment"># AUDIOSPK1001</span><br><span class="hljs-comment"># AUDIOSPK1002</span><br><br><span class="hljs-comment"># If is $0, which means the whole. $2 means the second column. $4 is the fourth column.</span><br></code></pre></td></tr></table></figure><p>Here we need to get the column that except the first column.</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs Bash"><br>awk <span class="hljs-string">&#x27;&#123;for(i=2; i&lt;NF; i++) printf $i &quot;\t&quot;; printf &#x27;</span>\n<span class="hljs-string">&#x27;&#125;&#x27;</span> text <span class="hljs-comment"># here the \t is just like \n,  we can delete it as well. the default diving symbol is &#x27; &#x27;, in here actually awk -F &#x27; &#x27;&#x27;&#123;for(i=2; i&lt;NF; i++) printf $i &quot;\t&quot;; printf &#x27;\n&#x27;&#125;&#x27; text. NF is the last column, awk is based on column manipulations. </span><br><br>awk <span class="hljs-string">&#x27;&#123;for(i=2; i&lt;NF; i++) printf $i &quot;&quot;; printf &#x27;</span>\n<span class="hljs-string">&#x27;&#125;&#x27;</span> text<br><span class="hljs-comment"># we will get exactly the same output just like python, but much faster:</span><br><span class="hljs-comment"># word1, word2, word3, ..., wordn</span><br><span class="hljs-comment"># I, Love, Kaldi</span><br><span class="hljs-comment"># Me, too</span><br></code></pre></td></tr></table></figure><h3 id="2-4-1-write-get-lm-sh-we-need-to-write-aw-shell-script-to-run-and-get-th-lm-language-model"><a href="#2-4-1-write-get-lm-sh-we-need-to-write-aw-shell-script-to-run-and-get-th-lm-language-model" class="headerlink" title="2.4.1 write get_lm.sh (we need to write aw shell script to run and get th lm(language model))"></a>2.4.1 write get_lm.sh (we need to write aw shell script to run and get th lm(language model))</h3><p>n-gram language model is statistical language model, more traning data can be more “better” in some ways. </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><code class="hljs Bash"><span class="hljs-comment"># You need firstly specify your corpus sources.</span><br>text = <span class="hljs-string">&quot;./text.lm&quot;</span><br><span class="hljs-comment"># 1. get all the corpus</span><br><span class="hljs-comment"># awk &#x27;&#123;for(i=2; i&lt;NF; i++) printf $i &quot;&quot;; printf &#x27;\n&#x27;&#125;&#x27; text &gt; xxx.lm</span><br><span class="hljs-comment"># loop all the columns:</span><br><span class="hljs-comment">#NF here means the last column</span><br><span class="hljs-comment">#   printf just like C language, they are the same in some ways</span><br><span class="hljs-comment"># 2. Deploy Trigram n-gram model</span><br>ngram-count -text text.lm -order 3 write train.part.txt.count  <br><span class="hljs-comment"># OR we can use</span><br>ngram-count -text <span class="hljs-variable">$text</span> -order 3 write train.part.txt.count  <br><span class="hljs-comment"># $text means the file itself, we already defined it at first.</span><br><span class="hljs-comment"># -text: the corpus</span><br><span class="hljs-comment"># wirte: write the file</span><br><span class="hljs-comment"># here 3 means tri, which indicates triphone, and write into train.part.txt.count file.</span><br><span class="hljs-comment"># here are the preview</span><br><br><span class="hljs-comment">#   word  pairs         times</span><br><span class="hljs-comment">#      I                  10</span><br><span class="hljs-comment">#    I  Love              5</span><br><span class="hljs-comment">#  I  Love Kaldi          1</span><br><span class="hljs-comment">#  Hello World &lt;/s&gt;       2</span><br><span class="hljs-comment">#  &lt;/s&gt; is great          1</span><br><span class="hljs-comment"># &lt;/s&gt; means the starting or ending point, usually means something will begin or end from there.  </span><br><br><span class="hljs-comment"># 3. From the 2nd step,  generateing the lm</span><br>ngram-count -<span class="hljs-built_in">read</span> train.part.txt.count -order 3 -lm LM -interpole -kndiscount<br><span class="hljs-comment">#  -lm which means the generated Language Model, right now we call it LM</span><br><span class="hljs-comment"># -interpole is the smoothing function, and kndiscount is the callback function.There are two possibilities, one is the original and other which is callback function.</span><br><span class="hljs-comment">#  \data\</span><br><span class="hljs-comment"># ngram 1 = 2821      , here means there are 2821 1grams&#x27; pairs</span><br><span class="hljs-comment"># ngram 2 = 6344</span><br><span class="hljs-comment"># ngram 3 = 444</span><br><span class="hljs-comment"># \1-grams:</span><br><span class="hljs-comment"># -3.4234324     1       -0.034523532 this is also probabities but with log(), we call backoff method</span><br><span class="hljs-comment"># -3.4234224     2       -0.032323532</span><br><span class="hljs-comment"># -2.3234224     A       -0.023233532</span><br><span class="hljs-comment"># \2-grams:</span><br><span class="hljs-comment"># -3.2424432     I  Love          -0.232312332</span><br><span class="hljs-comment"># \3-grams:</span><br><span class="hljs-comment"># -4.3244343     I  Love Kaldi    -0.454554545</span><br><br></code></pre></td></tr></table></figure><h3 id="2-4-2-Generate-G-fst"><a href="#2-4-2-Generate-G-fst" class="headerlink" title="2.4.2 Generate G.fst"></a>2.4.2 Generate G.fst</h3><p>There has two ways to generate <strong>G.fst</strong>.</p><p>Way1: Just Call from the Kaldi shell</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs Bash">utils/format_lm_sri.sh data/lang /lm/LM /data/local/dict/lexicon.txt/data/lang_test<br></code></pre></td></tr></table></figure><p>Way2: using <strong>arpa2fst</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs Bash">arpa2fst --disambig-symbol=<span class="hljs-comment">#0 --read-symbol-table=/data/lang/words.txt /lm/LM/G.fst</span><br></code></pre></td></tr></table></figure><p><a href="https://speech.zone/">https://speech.zone/</a></p><h1 id="UNIX-Shell-Cmds"><a href="#UNIX-Shell-Cmds" class="headerlink" title="UNIX Shell Cmds"></a>UNIX Shell Cmds</h1><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">cp</span>  -r S0252/S0252_mic/* ./S0150/S0150_mic/<br></code></pre></td></tr></table></figure><p>Copy all the data from the “S0252&#x2F;S0252_mic&#x2F;“ directory to “&#x2F;S0150&#x2F;S0150_mic&#x2F;“ directory. “-r” means copy directly without any warnings.</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">du</span> -sh<br></code></pre></td></tr></table></figure><p>Check the size of the directory.</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">du</span> -h --max-depth=1 /.<br></code></pre></td></tr></table></figure><p>Check all the directory size under the current directory.</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs Bash"><span class="hljs-built_in">cat</span> ...txt | <span class="hljs-built_in">tr</span> <span class="hljs-string">&#x27;[:upper:]&#x27;</span> <span class="hljs-string">&#x27;[:lower]&#x27;</span><br></code></pre></td></tr></table></figure><p>We can translate the upper case words in that file into lower case.</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs Bash"><span class="hljs-built_in">cat</span> ...txt | <span class="hljs-built_in">tr</span> <span class="hljs-string">&#x27;[:upper:]&#x27;</span> <span class="hljs-string">&#x27;[:lower]&#x27;</span> | grep -o <span class="hljs-string">&quot;[a-z]&quot;</span><br></code></pre></td></tr></table></figure><p>Print the document letter by letter.</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-selector-tag">a</span><br>d<br>c<br><span class="hljs-selector-tag">b</span><br></code></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs Bash"><span class="hljs-built_in">cat</span> ...txt | <span class="hljs-built_in">tr</span> <span class="hljs-string">&#x27;[:upper:]&#x27;</span> <span class="hljs-string">&#x27;[:lower]&#x27;</span> | <span class="hljs-built_in">sort</span><br></code></pre></td></tr></table></figure><p>Print the document letter by letter and sort them.</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-selector-tag">a</span><br><span class="hljs-selector-tag">b</span><br>c<br>d<br></code></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs Bash"><span class="hljs-built_in">cat</span> ...txt | <span class="hljs-built_in">tr</span> <span class="hljs-string">&#x27;[:upper:]&#x27;</span> <span class="hljs-string">&#x27;[:lower]&#x27;</span> | <span class="hljs-built_in">sort</span> | <span class="hljs-built_in">uniq</span> -c <br></code></pre></td></tr></table></figure><p>Print how many each letter occur.</p><figure class="highlight basic"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs basic"><span class="hljs-symbol">100 </span>a<br><span class="hljs-symbol">125 </span> b<br><span class="hljs-symbol">31 </span> c<br><span class="hljs-symbol">22 </span> d<br></code></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs Bash"><span class="hljs-built_in">cat</span> ...txt | <span class="hljs-built_in">tr</span> <span class="hljs-string">&#x27;[:upper:]&#x27;</span> <span class="hljs-string">&#x27;[:lower]&#x27;</span> | <span class="hljs-built_in">sort</span> | <span class="hljs-built_in">uniq</span> -c | <span class="hljs-built_in">sort</span> -nr  <span class="hljs-comment">### here the &quot;r&quot; in &quot;nr&quot; means reverse the sorting, means from the up to the bottom and vice versa.</span><br></code></pre></td></tr></table></figure><p>Print how many each letter occur by the frequency.</p><figure class="highlight basic"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs basic"><span class="hljs-symbol">125 </span> b<br><span class="hljs-symbol">100 </span>a<br><span class="hljs-symbol">22 </span> d<br><span class="hljs-symbol">31 </span> c<br></code></pre></td></tr></table></figure><h4 id="Using-Egrep-to-read-the-column"><a href="#Using-Egrep-to-read-the-column" class="headerlink" title="Using Egrep to read the column:"></a>Using Egrep to read the column:</h4><p>There is a .lab speech file, which is labbeled as well:</p><p>Here the first column is the timming, second is the frequency, and the third is the labelled data.</p><figure class="highlight lasso"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs lasso"><span class="hljs-number">0.1213</span> <span class="hljs-number">123</span> y<br><span class="hljs-number">0.1232</span> <span class="hljs-number">111</span> uw<br><span class="hljs-number">0.2113</span> <span class="hljs-number">110</span> eh<br><span class="hljs-params">...</span><span class="hljs-params">...</span><span class="hljs-params">...</span><span class="hljs-params">...</span>.<br></code></pre></td></tr></table></figure><p>So we now need to read all the third column information, we use egrep:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs Bash">egrep -h -o <span class="hljs-string">&quot;[a-z]&#123;1,2&#125;$&quot;</span> *.lab  <span class="hljs-comment">### we are looking for the lower case letters, $ means that they are happened at the end of the line</span><br><br></code></pre></td></tr></table></figure><p>This will print:</p><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs ebnf"><span class="hljs-attribute">y</span><br><span class="hljs-attribute">uw</span><br><span class="hljs-attribute">eh</span><br></code></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs Bash">egrep -h -o <span class="hljs-string">&quot;[a-z]&#123;1,2&#125;$&quot;</span> *.lab | <span class="hljs-built_in">sort</span> | <span class="hljs-built_in">uniq</span> -c | <span class="hljs-built_in">sort</span> -nr <br></code></pre></td></tr></table></figure><p>This will print the each phone frequency in reverse order:</p><figure class="highlight basic"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs basic"><span class="hljs-symbol">121 </span>y<br><span class="hljs-symbol">120 </span>uw<br><span class="hljs-symbol">110 </span>eh<br></code></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs Bash"><span class="hljs-built_in">ls</span> | <span class="hljs-built_in">wc</span> -l<br></code></pre></td></tr></table></figure><p>Check how many files in one directory</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">rm</span> -rf ./<br></code></pre></td></tr></table></figure><p>Delete the current directory.  No warrning will occur.</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs Bash"><span class="hljs-built_in">cat</span> ./.../*.txt<br></code></pre></td></tr></table></figure><p>Print all the .txt files in that directory.</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs Bash"><span class="hljs-built_in">cat</span> ./.../*.txt &gt; ./text<br></code></pre></td></tr></table></figure><p>Print all the .txt file’s content in that text file</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs Bash">python3 ./.../..py &gt; ./text<br></code></pre></td></tr></table></figure><p>print the .py running results on text file.</p><p>file .wav :<br>Check the identity of the wav file size</p><p>Use mv to change the file name:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">mv</span> ./../../.py ./../../.py<br></code></pre></td></tr></table></figure><p>We can use remove to change the file’s name.</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">which</span> ...<br></code></pre></td></tr></table></figure><p>Check where … is, the location of …</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs Bash">ll -lh<br></code></pre></td></tr></table></figure><p>check all the files’ size</p><p>If there has a space in the beginning of the file’s name, we just need to delete it.</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs Bash">sed <span class="hljs-string">&#x27;s|^ ||&#x27;</span><br></code></pre></td></tr></table></figure><p>Adding a “_” in the middle of the file name:</p><p>eg. SPKID 09912 into SPKID_09912, g means globally.</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs Bash">sed <span class="hljs-string">&#x27;s| |_|g&#x27;</span><br></code></pre></td></tr></table></figure><p>Or</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs Bash">sed <span class="hljs-string">&#x27;s|SPKID|SPKID_|&#x27;</span><br></code></pre></td></tr></table></figure><p>align two files:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs Bash"><span class="hljs-built_in">paste</span> -d <span class="hljs-string">&#x27; &#x27;</span> wav.scp wav_id &gt; tmp.txt <br></code></pre></td></tr></table></figure><h1 id="Vim"><a href="#Vim" class="headerlink" title="Vim:"></a>Vim:</h1><p>To the top: </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">GG<br></code></pre></td></tr></table></figure><p>To the bottom:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs Bash">gg<br></code></pre></td></tr></table></figure><p>vim name+tab : </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">auto-type the name <br></code></pre></td></tr></table></figure><p>auto sort: </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">:<span class="hljs-built_in">sort</span><br></code></pre></td></tr></table></figure><p>check how many lines:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">:<span class="hljs-built_in">set</span> number<br></code></pre></td></tr></table></figure><p>delete one line:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">dd</span><br></code></pre></td></tr></table></figure><p>search the “keyword”</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">/<span class="hljs-string">&quot;keyword&quot;</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>Speech &amp; Language Proceesing OpenCourse</title>
    <link href="/2022/03/23/Speech-Language-Proceesing-OpenCourse/"/>
    <url>/2022/03/23/Speech-Language-Proceesing-OpenCourse/</url>
    
    <content type="html"><![CDATA[<hr><p>title: About Speech &amp; Language Processing<br>date: 2022-03-23 14:48:45<br>tags:</p><hr><h1 id="1-The-Open-Course-for-SLP-SLP方向的优秀公开课程"><a href="#1-The-Open-Course-for-SLP-SLP方向的优秀公开课程" class="headerlink" title="1. The Open Course for SLP (SLP方向的优秀公开课程)"></a>1. The Open Course for SLP (SLP方向的优秀公开课程)</h1><p>通讯声学：<a href="https://users.aalto.fi/~vpulkki/Communication_Acoustics/">https://users.aalto.fi/~vpulkki/Communication_Acoustics/</a></p><p>Communication Acoustics - An Introduction to Speech, Audio and Psychoacoustics</p><p>C Programming: Using Linux Tools &amp; Libraries (Linux环境下的C语言编程教程)<br>B站地址：<a href="https://www.bilibili.com/video/BV1ct411D7BW?p=2">https://www.bilibili.com/video/BV1ct411D7BW?p=2</a></p><p>EDX：courses.edx.org&#x2F;courses&#x2F;course-v1:Dartmouth_IMTx+DART.IMT.C.07+2T2018&#x2F;course</p><p>MIT：电路和电子学<br>网易公开课：<br><a href="https://open.163.com/newview/movie/courseintro?newurl=/special/opencourse/circuits.html">https://open.163.com/newview/movie/courseintro?newurl=%2Fspecial%2Fopencourse%2Fcircuits.html</a></p><p>UC伯克利：数字集成电路设计概论 – EECS 151&#x2F;251A<br><a href="https://inst.eecs.berkeley.edu/~eecs151/sp20/">https://inst.eecs.berkeley.edu/~eecs151/sp20/</a></p><p>B站：<a href="https://www.bilibili.com/video/BV19C4y1a74h?p=1">https://www.bilibili.com/video/BV19C4y1a74h?p=1</a></p><p>罗切斯特大学：音频和音乐工程基础<br><a href="https://www.coursera.org/learn/audio-engineering/home/welcome">https://www.coursera.org/learn/audio-engineering/home/welcome</a></p><p>卫斯理大学：复分析引论<br><a href="https://www.coursera.org/learn/complex-analysis/home/welcome">https://www.coursera.org/learn/complex-analysis/home/welcome</a></p><p>杜克大学：Programming Fundamentals<br><a href="https://www.coursera.org/learn/programming-fundamentals/home/welcome">https://www.coursera.org/learn/programming-fundamentals/home/welcome</a></p><p>洛桑联邦理工学院： Digital Signal Processing （DSP）<br><a href="https://www.coursera.org/learn/dsp1/home/welcome">https://www.coursera.org/learn/dsp1/home/welcome</a></p><p>Universitat Pompeu Fabra of Barcelona &amp; 斯坦福大学： Audio Signal Processing for Music Applications<br><a href="https://www.coursera.org/learn/audio-signal-processing/home/welcome">https://www.coursera.org/learn/audio-signal-processing/home/welcome</a></p><p>伊利诺伊大学香槟分校： Object-Oriented Data Structures in C++<br><a href="https://www.coursera.org/learn/cs-fundamentals-1/home/welcome">https://www.coursera.org/learn/cs-fundamentals-1/home/welcome</a></p><p>台大： 李宏毅语音识别公开课<br><a href="https://www.youtube.com/watch?v=AIKu43goh-8&amp;list=PLlgrdmt2GMYbq0-ZY5EpihEx8bQX6Jm4b&amp;index=10">https://www.youtube.com/watch?v=AIKu43goh-8&amp;list=PLlgrdmt2GMYbq0-ZY5EpihEx8bQX6Jm4b&amp;index=10</a></p><p>印度理工学院语音识别Dr. Samudravijaya K： 语音识别课程<br><a href="https://www.youtube.com/watch?v=gMQyGASOZO0&amp;list=PLlgrdmt2GMYaEYTbiFENAmO184BfyzoIW&amp;index=7&amp;t=4s">https://www.youtube.com/watch?v=gMQyGASOZO0&amp;list=PLlgrdmt2GMYaEYTbiFENAmO184BfyzoIW&amp;index=7&amp;t=4s</a></p><p>卡内基梅隆大学2015年春季：机器学习 Tom Mitchell and Maria-Florina Balcan<br><a href="http://www.cs.cmu.edu/~ninamf/courses/601sp15/lectures.shtml">http://www.cs.cmu.edu/~ninamf/courses/601sp15/lectures.shtml</a></p><p>斯坦福大学 Stanford CS224N: NLP with Deep Learning | Winter 2019：自然语言处理<br><a href="https://www.youtube.com/playlist?list=PLoROMvodv4rOhcuXMZkNm7j3fVwBBY42z">https://www.youtube.com/playlist?list=PLoROMvodv4rOhcuXMZkNm7j3fVwBBY42z</a></p><p><a href="https://online.stanford.edu/courses/xcs224n-natural-language-processing-deep-learning">https://online.stanford.edu/courses/xcs224n-natural-language-processing-deep-learning</a></p><p>斯坦福大学：Automata Theory （自动理论）<br>On Edx<br><a href="https://www.youtube.com/channel/UCHuRxy3-6SNP2mQt2MOoWiw">https://www.youtube.com/channel/UCHuRxy3-6SNP2mQt2MOoWiw</a></p><p>亚琛工大等：Applications in Communication Acoustics<br>通讯声学基础：<a href="https://learning.edx.org/course/course-v1:RWTHTUMx+CA101.1x+3T2019/home">https://learning.edx.org/course/course-v1:RWTHTUMx+CA101.1x+3T2019/home</a></p><p>通讯声学应用：<a href="https://learning.edx.org/course/course-v1:RWTHTUMx+CA101.2x+3T2019/home">https://learning.edx.org/course/course-v1:RWTHTUMx+CA101.2x+3T2019/home</a></p><p>韩国科学技术高级研究院： 声学导论 Yang-Hann Kim<br><a href="https://www.coursera.org/learn/intro-to-acoustics/home/week/1">https://www.coursera.org/learn/intro-to-acoustics/home/week/1</a></p><p>北京大学： 离散数学 陈斌<br><a href="https://www.coursera.org/learn/dmathgen/home/week/1">https://www.coursera.org/learn/dmathgen/home/week/1</a></p><p>加州大学圣地亚哥分校：人机交互设计导论<br><a href="https://www.coursera.org/learn/human-computer-interaction/home/week/1">https://www.coursera.org/learn/human-computer-interaction/home/week/1</a></p><p>印地安纳大学： C311 Programming Languages 2020<br><a href="https://cgi.sice.indiana.edu/~c311/doku.php?id=home">https://cgi.sice.indiana.edu/~c311/doku.php?id=home</a></p><p>爱丁堡大学：语音识别 AUTOMATIC SPEECH RECOGNITION (ASR) 2019-20<br><a href="https://www.inf.ed.ac.uk/teaching/courses/asr/index-2020.html">https://www.inf.ed.ac.uk/teaching/courses/asr/index-2020.html</a></p><p>斯坦福大学：CS224S: Spoken Language Processing Winter 2021 语音处理<br><a href="http://web.stanford.edu/class/cs224s/">http://web.stanford.edu/class/cs224s/</a></p><p>纽约大学：语音识别<br><a href="https://cs.nyu.edu/~eugenew/asr13/">https://cs.nyu.edu/~eugenew/asr13/</a></p><p>佐治亚理工大学：AC&#x2F;DC Analysis 直流和交流分析<br><a href="https://www.coursera.org/learn/linear-circuits-dcanalysis/home/welcome">https://www.coursera.org/learn/linear-circuits-dcanalysis/home/welcome</a></p><p><a href="https://www.coursera.org/learn/linear-circuits-ac-analysis/home/welcome">https://www.coursera.org/learn/linear-circuits-ac-analysis/home/welcome</a></p><p>斯坦福大学：科学写作 Writing in the Sciences<br><a href="https://www.coursera.org/learn/sciwrite/home/welcome">https://www.coursera.org/learn/sciwrite/home/welcome</a></p><p>HDL Bits<br><a href="https://hdlbits.01xz.net/wiki/Main_Page---">https://hdlbits.01xz.net/wiki/Main_Page---</a><br>title: About Speech &amp; Language Processing 关于语音与语言处理<br>date: 2022-03-23 14:49:27<br>tags:</p><hr>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>Kalid Notes</title>
    <link href="/2022/03/23/hello-world/"/>
    <url>/2022/03/23/hello-world/</url>
    
    <content type="html"><![CDATA[<p>Kaldi has a lot of examples in its projects.There are two necessary raw materials for us to train the model:</p><ol><li>.wav file</li><li>labelled .txt</li></ol><p>We need four necessary elements in Kaldi! We call it “HCLG.fst”, we can make speech recognition from this core idea. Acutally, just like we are building a map, and we just decode all the paths from there to get the prediction results. The underneath idea just like from the typology from the mathematics. </p><p>We are using Viterbi algorithm to decoding our HCLG.fst. The exact name should be token passing method, which is a kind of variant algotithm of Viterbi.</p><p>###Decoding problem<br>UTF-8 &amp; Ascii problem, the decoding problem. We can just run this before head into the shell, so we can manipulate the Chinese characters in Python in linux system.</p><figure class="highlight bash"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><pre><code class="hljs Bash"><span class="hljs-built_in">export</span> PYTHONIOENCODING=utf-8<br></code></pre></td></tr></table></figure><p>In kaldi, 1 frame is 10ms. For some front work, it always like 24ms for one frame. For a workable dataset, we at least need 2000 hrs data. </p><p>HCLG.fst includes：</p><p>Here are the flowchart: from acoustic characteristics —&gt; phones —&gt; words —&gt; sentences<br>                                H.fst                                  L.fst       G.fst</p><p>#2. H.fst<br>For H.fst, we input acoustic characteristics, output phones.</p><h2 id="2-1-Make-MFCC"><a href="#2-1-Make-MFCC" class="headerlink" title="2.1 Make MFCC"></a>2.1 Make MFCC</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs Bash">steps/make_mfcc.sh --nj 1 --mfcc-config=/root/data/kaldi_file/<br></code></pre></td></tr></table></figure><p>sudo cnpm install –save hexo-deployer-git</p><p>###1. L.fst</p><p>We input phones and output words. </p><p>For building those four elements, we need 4 files: 1. wav.scp, 2. text, 3. utt2spk, 4. spk2utt.</p><p>Here are the format of those 4 files:</p><ol><li>wav.scp: audio id –&gt; file directory path name</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs Python"><span class="hljs-keyword">import</span> os<br><span class="hljs-comment">#The location of the audio directory</span><br>target_dir = <span class="hljs-string">&#x27;./../../&#x27;</span><br>save_path = <span class="hljs-string">&#x27;./../../&#x27;</span><br><br><span class="hljs-comment"># Loop all the audio resources</span><br>wav_scp = []<br><span class="hljs-keyword">for</span> file_name <span class="hljs-keyword">in</span> os.listdir(target_dir):<br><span class="hljs-comment"># Append all the .wav file into the list</span><br><span class="hljs-keyword">if</span> file_name[-<span class="hljs-number">3</span>:<span class="hljs-number">0</span>] == <span class="hljs-string">&quot;.wav&quot;</span>:<br><span class="hljs-comment"># Here we use &quot;.&quot; to split the file_name and use join to combine our directory address. We also can use &quot;os.path.join(target_dir + filename)&quot;. </span><br>wav_scp.append([file_name.split(<span class="hljs-string">&quot;.&quot;</span>)[<span class="hljs-number">0</span>], os.path.join(target_dir, filename)])<br><span class="hljs-keyword">pass</span><br><span class="hljs-keyword">pass</span><br><span class="hljs-comment"># we can check the output by print(wav_scp)</span><br><span class="hljs-comment"># Save wav_scp</span><br><span class="hljs-keyword">with</span> <span class="hljs-built_in">open</span>(os.path.join(save_path, wav.scp), <span class="hljs-string">&#x27;w&#x27;</span>, encoding = <span class="hljs-string">&#x27;utf-8&#x27;</span>) <span class="hljs-keyword">as</span> file:<br><span class="hljs-comment"># Loop all the items in wav.scp and save them one by one</span><br><span class="hljs-keyword">for</span> item <span class="hljs-keyword">in</span> wav.scp: <br>file.writelines(item[<span class="hljs-number">0</span>]+<span class="hljs-string">&quot; &quot;</span>+item[<span class="hljs-number">1</span>]+<span class="hljs-string">&quot;\n&quot;</span>)   <br><span class="hljs-comment">#Our output format should be:  filename target_dir filename</span><br>    <span class="hljs-keyword">pass</span><br><span class="hljs-keyword">pass</span><br></code></pre></td></tr></table></figure><p>The last step can be sorting the file name by vim:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs Unix">:sort<br></code></pre></td></tr></table></figure><ol start="2"><li>text:    audio id –&gt; labelled file</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><code class="hljs Python"><span class="hljs-keyword">import</span> os<br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br><span class="hljs-string">From AUDIOSPK1001.txt get ID and &quot;I Love Kaldi&quot;</span><br><span class="hljs-string"></span><br><span class="hljs-string">AUDIOSPK1001 I Love Kaldi</span><br><span class="hljs-string">AUDIOSPK1002 Me too</span><br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br>target_dir = <span class="hljs-string">&quot;./.../.../&quot;</span><br><span class="hljs-comment"># This is the stored text file</span><br><br>save_path = <span class="hljs-string">&quot;./.../.../&quot;</span><br>text = []<br><br><br><span class="hljs-comment"># loop all the text file name in directory</span><br><span class="hljs-keyword">for</span> filename <span class="hljs-keyword">in</span> os.listdir(target_dir):<br><span class="hljs-comment"># only operate the file that ends with &quot;.txt&quot;</span><br><span class="hljs-keyword">if</span> filename[-<span class="hljs-number">4</span>:] != <span class="hljs-string">&quot;.txt&quot;</span>:<br><span class="hljs-keyword">continue</span><br><br><span class="hljs-comment"># read the file</span><br><span class="hljs-keyword">with</span> <span class="hljs-built_in">open</span>(os.path.join(target_dir, filename), <span class="hljs-string">&#x27;r&#x27;</span>, encoding=<span class="hljs-string">&quot;utf-8&quot;</span>)<span class="hljs-keyword">as</span> file:<br><span class="hljs-comment"># read line by line </span><br><span class="hljs-keyword">for</span> line <span class="hljs-keyword">in</span> file.readlines():<br><span class="hljs-comment"># Delete all &quot;\n&quot; and the the space</span><br>line = line.strip(<span class="hljs-string">&quot;\n&quot;</span>).strip()<br><span class="hljs-comment"># print(line.strip(&quot;\n&quot;)), we can print the text files all in one screen without the \n symbols.</span><br><br><span class="hljs-comment"># Get the filename with its contents</span><br>text.append([filename.split(<span class="hljs-string">&quot;.&quot;</span>)[<span class="hljs-number">0</span>], line])<br><br><span class="hljs-keyword">pass</span><br><span class="hljs-keyword">pass</span><br><span class="hljs-keyword">pass</span><br><br><br><span class="hljs-comment"># save the file as nosegment </span><br><span class="hljs-keyword">with</span> <span class="hljs-built_in">open</span>(os.join(os.path.join(save_path, <span class="hljs-string">&quot;text.nosegement&quot;</span>)), <span class="hljs-string">&#x27;w&#x27;</span>, encoding = <span class="hljs-string">&#x27;utf-8&#x27;</span>) <span class="hljs-keyword">as</span> file:<br><span class="hljs-comment"># loop all the lines and save it one by one.</span><br><span class="hljs-keyword">for</span> item <span class="hljs-keyword">in</span> text:<br>file.writelines(item[<span class="hljs-number">0</span>] + <span class="hljs-string">&quot; &quot;</span> + item[<span class="hljs-number">1</span>] + <span class="hljs-string">&quot;\n&quot;</span>)<br><span class="hljs-keyword">pass</span> <br><br><br><span class="hljs-built_in">print</span>(text)<br></code></pre></td></tr></table></figure><p>##2 Text washing(prepare the data)<br>We need to prpare the data and do the data cleaning from the data_path directory<br>def pre_data(data_path):<br>###2.1 Regular Expression, this is always the first step</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs Python"><span class="hljs-string">&#x27;&#x27;&#x27;</span><br><span class="hljs-string">This is core processing function, we mostly use Regular Expression here.</span><br><span class="hljs-string">Here is just a sample code, that we need to deal with: abrabic numbers, if its number, then there is no need to do segment, just replace it with space one by one. </span><br><span class="hljs-string"></span><br><span class="hljs-string">input：&quot;一二三五六&quot;</span><br><span class="hljs-string">output：&quot;一 二 三 五 六&quot;</span><br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br><br><br><br><br><br>```Python<br><span class="hljs-keyword">import</span> re<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">solve_data</span>():<br><span class="hljs-comment"># Delete &quot;()&quot;</span><br><span class="hljs-comment"># detect Chinese characters(\u4e00-\u9fa5) from a-z, A-Z, 0-9, &quot;.&quot;. It will catch the sentences with those elements.</span><br>a = re.findall(<span class="hljs-string">&#x27;[\u4e00-\u9fa5a-zA-Z0-9 .]+&#x27;</span>, data, re.S)<br><span class="hljs-comment">#print(&quot;&quot;.join(a))</span><br><span class="hljs-keyword">return</span> <span class="hljs-string">&quot; &quot;</span>.join(a)<br><span class="hljs-keyword">pass</span><br><br><span class="hljs-comment"># save the results into a new &quot;solve_data&quot; path</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">pre_data</span>(<span class="hljs-params">data_path+<span class="hljs-string">&quot;solve_data&quot;</span></span>):<br>data = []<br><span class="hljs-keyword">with</span> <span class="hljs-built_in">open</span>(data_path, <span class="hljs-string">&quot;w&quot;</span>, encoding=utf-<span class="hljs-number">8</span>) <span class="hljs-keyword">as</span> file:<br><span class="hljs-comment"># loop all the lines</span><br><span class="hljs-keyword">for</span> line <span class="hljs-keyword">in</span> data:<br>file.writelines(<span class="hljs-built_in">str</span>(line)+<span class="hljs-string">&quot;\n&quot;</span>)<br><span class="hljs-keyword">pass</span><br><span class="hljs-keyword">pass</span><br></code></pre></td></tr></table></figure><p>After we get our target, we need to set the processing functions.</p><p>####2.1.1 Replace numbers into words</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs Python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">replace_num</span>(<span class="hljs-params">data</span>)<br>data.replace(<span class="hljs-string">&quot;.&quot;</span>, <span class="hljs-string">&quot;dot&quot;</span>)<br>data.replace(<span class="hljs-string">&quot;0&quot;</span>, <span class="hljs-string">&quot;zero&quot;</span>)<br>data.replace(<span class="hljs-string">&quot;1&quot;</span>, <span class="hljs-string">&quot;one&quot;</span>)<br>data.replace(<span class="hljs-string">&quot;2&quot;</span>, <span class="hljs-string">&quot;two&quot;</span>)<br>data.replace(<span class="hljs-string">&quot;3&quot;</span>, <span class="hljs-string">&quot;three&quot;</span>)<br><span class="hljs-comment"># .......</span><br></code></pre></td></tr></table></figure><p>###2.2 Segment</p><p>We need to enterpret the text file to phones, the tools we need is lexicon, which is just like the dictionary. So in this way, we need to segement the words, and according to our prior knowledge from our dictionary, so we can invert the segmented words into the phones. This step is typically used for the language like Chinese, since for Chinese, the word’s stop is not just like we put a space there, but we need to segment it manually. For Chinese, we mostly use Jieba to segement the sentences into words. </p><p>Here are the preview of the results should be:<br>input：”今天是一个好日子”<br>output：”今天 是 一个 好 日子”</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs Python"><span class="hljs-keyword">import</span> jieba<br><br><span class="hljs-comment"># Claim the function for segmenting</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">segment_item</span>(<span class="hljs-params">data</span>):<br><span class="hljs-keyword">return</span> <span class="hljs-string">&quot; &quot;</span>.join(jieba.cut(data))<br><span class="hljs-keyword">pass</span><br><span class="hljs-comment"># After we set this function we can combine into the previous saving files.</span><br><span class="hljs-comment"># save the file as nosegment </span><br><span class="hljs-keyword">with</span> <span class="hljs-built_in">open</span>(os.join(os.path.join(save_path, <span class="hljs-string">&quot;text.nosegement&quot;</span>)), <span class="hljs-string">&#x27;w&#x27;</span>, encoding = <span class="hljs-string">&#x27;utf-8&#x27;</span>) <span class="hljs-keyword">as</span> file:<br><span class="hljs-comment"># loop all the lines and save it one by one.</span><br><span class="hljs-keyword">for</span> item <span class="hljs-keyword">in</span> text:<br><span class="hljs-comment"># we firstly do the segment and then save it one by one</span><br>segmet_list = segement_item(item[<span class="hljs-number">1</span>])<br>file.writelines(item[<span class="hljs-number">0</span>] + <span class="hljs-string">&quot; &quot;</span> + segmet_list + <span class="hljs-string">&quot;\n&quot;</span>)<br><span class="hljs-keyword">pass</span> <br><br></code></pre></td></tr></table></figure><h1 id="2-3-Combine-into-a-whole-processing-structure"><a href="#2-3-Combine-into-a-whole-processing-structure" class="headerlink" title="2.3 Combine into a whole processing structure"></a>2.3 Combine into a whole processing structure</h1><p>Now after we did the regular expression and jieba. We just combine them together. </p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><code class="hljs Python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">jieba_cut_data</span>(<span class="hljs-params">data</span>):<br><br>data = replace_num(data)<br><span class="hljs-comment"># this is just for the normal case, we just need to cut the sentences</span><br><span class="hljs-comment"># cut the words with &quot; &quot; one space, and replace the &quot;  &quot;(two spaces) into only one space.</span><br>data = <span class="hljs-string">&quot; &quot;</span>.join(jieba.cut(data)).replace(<span class="hljs-string">&quot;  &quot;</span>, <span class="hljs-string">&quot; &quot;</span>))<br><br><br><span class="hljs-comment"># these are the needs for unusual cases, which we dealt before in the RE section, we already found out the words with those elements we want to handle with. Now, it is time for us to deal with them. If there is all numbers, so we just do not split the words, like &quot;一二三四五&quot;.</span><br>is_cut =  <span class="hljs-literal">True</span><br><br><br><br><span class="hljs-comment"># here if the scenario is TRUE, which means there is a element in there, if all are numbers it will become [True, True, True, True, True, ... True, True], in that case, it will be &quot;is_cut&quot; ture. Not in, is not return anymore.</span><br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br><span class="hljs-string">input:  这是 学习 笔记</span><br><span class="hljs-string">output: [], which is an empty list</span><br><span class="hljs-string"></span><br><span class="hljs-string">input:  这是一本学习笔记本卖两块</span><br><span class="hljs-string">output: [  Ture,         True], sum this list we got 2, but not equals to the previous list length, so we do not process it.</span><br><span class="hljs-string"></span><br><span class="hljs-string">input:  一二三四五</span><br><span class="hljs-string">output: [Ture, Ture, Ture, Ture, True], sum this list we got 5, equals to the previous list length, so we process it.</span><br><span class="hljs-string"></span><br><span class="hljs-string"></span><br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br><br><span class="hljs-keyword">if</span> <span class="hljs-built_in">sum</span>（[<span class="hljs-literal">True</span> <span class="hljs-keyword">for</span> item <span class="hljs-keyword">in</span> data <span class="hljs-keyword">if</span> item <span class="hljs-keyword">in</span> [<span class="hljs-string">&quot;零&quot;</span>], [<span class="hljs-string">&quot;壹&quot;</span>], [<span class="hljs-string">&quot;二&quot;</span>], [<span class="hljs-string">&quot;三&quot;</span>], [<span class="hljs-string">&quot;四&quot;</span>]， [<span class="hljs-string">&quot;五&quot;</span>]]）== !<span class="hljs-built_in">len</span>(data):<br>is_cut = <span class="hljs-literal">True</span><br><br><span class="hljs-comment"># here if the scenario is TRUE, not all the context are numbers. we just follow the normal way, cut it with jieba, and replace the two spaces into one space.</span><br><span class="hljs-keyword">if</span> is_cut:<br>data = <span class="hljs-string">&quot; &quot;</span>.join(jieba.cut(data)).replace(<span class="hljs-string">&quot;  &quot;</span>, <span class="hljs-string">&quot; &quot;</span>))<br><span class="hljs-keyword">else</span>：<br><span class="hljs-comment"># we process those context with full numbers.</span><br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br><span class="hljs-string">input:  一二三四五</span><br><span class="hljs-string">output: [一 二 三 四 五]</span><br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br>data = <span class="hljs-string">&quot; &quot;</span>.join(data)<br><span class="hljs-keyword">return</span> data<br><br><span class="hljs-keyword">pass</span><br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs python"><br>data = []<br><span class="hljs-keyword">with</span> <span class="hljs-built_in">open</span>(data_path, <span class="hljs-string">&#x27;r&#x27;</span>, encoding = <span class="hljs-string">&#x27;utf-8&#x27;</span>) <span class="hljs-keyword">as</span> file:<br><span class="hljs-keyword">for</span> line <span class="hljs-keyword">in</span> file.readlines():<br><span class="hljs-comment"># print(line.strip(&quot;\n&quot;).strip()), preview the results to delete the &#x27;\n&#x27; together with the space.</span><br><span class="hljs-comment"># just append the data that once processed.</span><br><span class="hljs-comment"># bef_data here is the before data</span><br>bef_data = line.strip(<span class="hljs-string">&quot;\n&quot;</span>).strip()<br><span class="hljs-comment"># cut the sentences into words</span><br>bef_data = <span class="hljs-string">&quot; &quot;</span>.join(jieba.cut(bef_data))<br><span class="hljs-comment"># here we input the bef_data, after processed in solve_data() function to get the processed data</span><br>data.append(solve_data(bef_data))<br><span class="hljs-keyword">pass</span><br><span class="hljs-keyword">pass</span><br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs python"><br><br><br><span class="hljs-comment"># this is a magic function</span><br><span class="hljs-keyword">if</span> _name_== <span class="hljs-string">&#x27;_main_&#x27;</span>:<br>data_path = <span class="hljs-string">&quot;./.../.../&quot;</span><br>pre_data(data_path)<br><br></code></pre></td></tr></table></figure><h1 id="2-4-lexicon-txt-get-lexicon-py"><a href="#2-4-lexicon-txt-get-lexicon-py" class="headerlink" title="2.4 lexicon.txt   get_lexicon.py"></a>2.4 lexicon.txt   get_lexicon.py</h1><p>We need two kinds of dictionaries.<br>1st. the lexicon.txt from the corpus to better train a n-gram model, in some words, the language model.<br>2st. the word-to-phones, we also need a reference lists from there, we need acoustic model. In this case, so we need a “BIG” dictionary.</p><p>In this step, we need to transform the words into phones, so we can align the words and train them.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><code class="hljs python"><br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br><span class="hljs-string">This is the dictionary mostly for the acoustic training needs.</span><br><span class="hljs-string">去年  q v4 n ian2</span><br><span class="hljs-string">上去  sh ang4 q v4</span><br><span class="hljs-string">上去  sh ang4 q v5</span><br><span class="hljs-string"></span><br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">get_lexicon</span>(<span class="hljs-params">data_path</span>):<br><br><span class="hljs-comment"># set can reduce the duplications. The dictionary must be just a set. </span><br>lexicon = <span class="hljs-built_in">set</span>()<br><span class="hljs-keyword">with</span> <span class="hljs-built_in">open</span>(<span class="hljs-string">&quot;data_path&quot;</span>, <span class="hljs-string">&quot;w&quot;</span>, encoding = <span class="hljs-string">&quot;utf-8&quot;</span>) <span class="hljs-keyword">as</span> file:<br><span class="hljs-keyword">for</span> line <span class="hljs-keyword">in</span> file.readlines():<br><span class="hljs-comment">#print(line.strip(&quot;\n&quot;).strip().split(&quot; &quot;)), remove the \n and cut with the identifier from the SPACE &quot; &quot;</span><br>[lexicon.add(item) <span class="hljs-keyword">for</span> item <span class="hljs-keyword">in</span> line.strip(<span class="hljs-string">&quot;\n&quot;</span>).strip().split(<span class="hljs-string">&quot; &quot;</span>)]<br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br><span class="hljs-string">input:  这是一本学习笔记本卖两块</span><br><span class="hljs-string">output: [这是，一本， 学习， 笔记本， 卖， 两块],</span><br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br><br><br><span class="hljs-keyword">pass</span><br><span class="hljs-keyword">pass</span><br><span class="hljs-comment">#print(lexicon)</span><br><span class="hljs-comment"># save the lexicon</span><br><span class="hljs-keyword">with</span> <span class="hljs-built_in">open</span>(<span class="hljs-string">&quot;../.../lexicon.txt&quot;</span>, <span class="hljs-string">&quot;w&quot;</span>, encoding = <span class="hljs-string">&quot;utf-8&quot;</span>) <span class="hljs-keyword">as</span> file:<br><span class="hljs-keyword">for</span> item <span class="hljs-keyword">in</span> lexicon:<br>file.writelines(item + <span class="hljs-string">&quot;\n&quot;</span>)<br><span class="hljs-comment"># here are the estimated results.</span><br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br><span class="hljs-string">去年 </span><br><span class="hljs-string">上去  </span><br><span class="hljs-string">上去  </span><br><span class="hljs-string">一</span><br><span class="hljs-string">笔记本</span><br><span class="hljs-string">卖</span><br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br><span class="hljs-keyword">pass</span><br><span class="hljs-keyword">pass</span><br><span class="hljs-keyword">pass</span><br><br>get_lexicon(<span class="hljs-string">&quot;./.../temp&quot;</span>)<br><br></code></pre></td></tr></table></figure><p>Finally we can get the ID to words.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs Python"><br><br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br><span class="hljs-string"></span><br><span class="hljs-string">ID    [word1, word2, word3, ..., wordn]</span><br><span class="hljs-string">[&#x27;UDIOSPK1001SEN01&#x27;, &#x27;I, Love, Kaldi&#x27;]</span><br><span class="hljs-string">[&#x27;UDIOSPK1001SEN02&#x27;, &#x27;Me, too&#x27;]</span><br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">id2words</span>(<span class="hljs-params">data_path</span>):<br><br><span class="hljs-keyword">for</span> file_name <span class="hljs-keyword">in</span> os.listdir(data_path):<br><span class="hljs-keyword">if</span> fiel_name[-<span class="hljs-number">3</span>:<span class="hljs-number">0</span>] == <span class="hljs-string">&quot;txt&quot;</span>:<br><span class="hljs-keyword">continue</span><br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br><span class="hljs-string">...........</span><br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br><br></code></pre></td></tr></table></figure><h1 id="Dictionary-this-is-the-dict-file-we-need-to-manipulate-in-data-x2F-local-x2F-dict-directory"><a href="#Dictionary-this-is-the-dict-file-we-need-to-manipulate-in-data-x2F-local-x2F-dict-directory" class="headerlink" title="Dictionary this is the dict file we need to manipulate, in data&#x2F;local&#x2F;dict directory"></a>Dictionary this is the dict file we need to manipulate, in data&#x2F;local&#x2F;dict directory</h1><ol start="3"><li><p>utt2spk: audio id –&gt; SPK id</p></li><li><p>spk2utt: SPK      –&gt; audio id</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br></pre></td><td class="code"><pre><code class="hljs Python"><span class="hljs-keyword">import</span> os<br><span class="hljs-comment"># The path of the audio resources</span><br>path_dir = <span class="hljs-string">&quot;./.../.../&quot;</span><br><br><br><span class="hljs-comment"># The final output path</span><br>save_path = <span class="hljs-string">&quot;./.../.../&quot;</span><br><br><br><br><span class="hljs-comment"># Save the final results</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">save_data</span>(<span class="hljs-params">data, file_name</span>):<br><span class="hljs-keyword">with</span> <span class="hljs-built_in">open</span>(os.path.join(target_file, file_name), <span class="hljs-string">&#x27;w&#x27;</span>, encoding = <span class="hljs-string">&quot;utf-8&quot;</span>) <span class="hljs-keyword">as</span> file:<br><span class="hljs-keyword">for</span> item <span class="hljs-keyword">in</span> data:<br><span class="hljs-comment"># save the item line in line</span><br>file.writelines(item)<br><span class="hljs-keyword">pass</span><br><span class="hljs-keyword">pass</span><br><span class="hljs-keyword">pass</span><br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br><span class="hljs-string">Audio file name: AUDIOSPK1001.wav</span><br><span class="hljs-string"></span><br><span class="hljs-string">AUDIOSPK1001 SPK1</span><br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">get_utt2spk</span>():<br><span class="hljs-comment"># For saving the final results</span><br>utt2spk = [] <br><span class="hljs-comment"># loop all the directories</span><br><span class="hljs-keyword">for</span> file_name <span class="hljs-keyword">in</span> os.listdir(path_dir):<br><span class="hljs-comment"># if the file itself is .wav file, we operate, others dismiss</span><br><span class="hljs-keyword">if</span> file_name[-<span class="hljs-number">4</span>:] == <span class="hljs-string">&quot;.wav&quot;</span>:<br><br><br><span class="hljs-comment"># Audio ID</span><br>utt = file_name.split(<span class="hljs-string">&quot;.&quot;</span>)[<span class="hljs-number">0</span>]<br><span class="hljs-comment"># SPK ID</span><br>spk = utt[-<span class="hljs-number">7</span>:-<span class="hljs-number">5</span>]<br><br><span class="hljs-comment"># Print(utt+ &quot; &quot; + spk + &quot;\n&quot;)</span><br><span class="hljs-comment"># Add into utt2spk</span><br>utt2spk.append(utt + <span class="hljs-string">&quot; &quot;</span> + spk + <span class="hljs-string">&quot;\n&quot;</span>)<br><span class="hljs-keyword">pass</span><br><span class="hljs-keyword">pass</span><br><span class="hljs-comment"># save the data</span><br>save_data(utt2spk, <span class="hljs-string">&quot;utt2spk&quot;</span>)<br><br><br><br><span class="hljs-comment"># set the function to get spk2utt</span><br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br><span class="hljs-string">Audio file name: AUDIOSPK1001.wav</span><br><span class="hljs-string"></span><br><span class="hljs-string">SPK1 AUDIOSPK1001 AUDIOSPK1002</span><br><span class="hljs-string">SPK2 AUDIOSPK2001 AUDIOSPK2001</span><br><span class="hljs-string">......</span><br><span class="hljs-string">dict&#123;</span><br><span class="hljs-string">&quot;SPK1&quot; : [AUDIOSPK1001, AUDIOSPK1002],</span><br><span class="hljs-string">&quot;SPK2&quot; : [AUDIOSPK2001, AUDIOSPK2002],</span><br><span class="hljs-string">......</span><br><span class="hljs-string">&#125;</span><br><span class="hljs-string"></span><br><span class="hljs-string"></span><br><span class="hljs-string"></span><br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">get_spk2utt</span>():<br>spk2utt = &#123;&#125;<br><span class="hljs-keyword">for</span> file_name <span class="hljs-keyword">in</span> os.listdir(path_dir):<br><span class="hljs-comment"># Delete a file</span><br><span class="hljs-keyword">if</span> file_name[-<span class="hljs-number">4</span>:<span class="hljs-number">0</span>] == <span class="hljs-string">&quot;.txt&quot;</span>:<br><span class="hljs-keyword">continue</span><br><span class="hljs-comment"># audio ID</span><br>utt = file_name.split(<span class="hljs-string">&quot;.&quot;</span>)[<span class="hljs-number">0</span>]<br><span class="hljs-comment"># SPK ID</span><br>spk = utt[-<span class="hljs-number">7</span>:-<span class="hljs-number">5</span>]<br><br><br><span class="hljs-comment"># If there has a SPK here, we just append</span><br><span class="hljs-keyword">if</span> spk <span class="hljs-keyword">in</span> spk2utt:<br>spk2utt[spk].append(utt)<br><span class="hljs-comment"># If there not have a SPK here, we just preset it as a list. </span><br><span class="hljs-keyword">else</span>:<br>spk2utt[spk] = []<br><span class="hljs-keyword">pass</span><br><br><span class="hljs-comment"># using print(spk2utt) to check</span><br><br><span class="hljs-comment"># final output list from the dict</span><br>write_spk2utt = []<br><span class="hljs-keyword">for</span> key <span class="hljs-keyword">in</span> spk2utt.keys():<br>write_spk2utt.append(<span class="hljs-built_in">str</span>(key)+<span class="hljs-string">&quot; &quot;</span>.join(spk2utt(key))+<span class="hljs-string">&quot;\n&quot;</span>)<br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br><span class="hljs-string">list = [&quot;A&quot;, &quot;B&quot;, &quot;C&quot;, &quot;D&quot;]</span><br><span class="hljs-string">print(&quot; &quot;.join(list))</span><br><span class="hljs-string">------------------------------------------------------</span><br><span class="hljs-string">A B C D</span><br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br><span class="hljs-keyword">pass</span><br><span class="hljs-comment"># save the output</span><br>save_data(write_spk2utt, <span class="hljs-string">&quot;spk2utt&quot;</span>)<br><span class="hljs-keyword">pass</span><br><br><br><br>get_spk2utt()<br>get_utt2spk()<br><br><br><br><br><br></code></pre></td></tr></table></figure></li></ol><p>If we do not caring about the SPK, just focus on the audio content itslelf will be a big issue. Since as we know, we do need know the spk’s voice characteristics and this will affect our trainings,we need to take that bias into it. We will do “CMVN” here, this will be applied for prior distribution for male and female. The value between the “CMVN” is [0-1]. </p><p>The difference between the utt2spk and the spk2utt is that, for utt2spk, there is only one-to-one relations instead of like spk2utt, there are one-to-multiple relation. So, in most cases, we only need either 3 or 4, because if we already got one, another one is also can be derived.</p><p>How to get those four files can be the core idea of the kaldi ASR system. The ASR detection logic can be: acoustic features –&gt; H.fst –&gt; phones C.fst –&gt; L.fst + G.fst (linguistics) –&gt; words.</p><p>dict includes:</p><ol><li>lexicon.txt : word –&gt; phones</li><li>phone.txt&#x2F;nonsilence_phones.txt : all the phones</li><li>silence_phones.txt : SIL</li></ol><h1 id="Generate-run-sh-amp-get-L-fst"><a href="#Generate-run-sh-amp-get-L-fst" class="headerlink" title="Generate run.sh &amp; get L.fst"></a>Generate run.sh &amp; get L.fst</h1><p>The final step should be write a run.sh file to generate the L.fst file.</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs Bash"><span class="hljs-comment"># 1. generate the L.fst</span><br><br><span class="hljs-comment"># here we used prepare_lang.sh </span><br><span class="hljs-comment"># there are four params we input: </span><br><br><span class="hljs-comment">#1. the four files we prepared, fix_data_dir.sh ./local/dict</span><br><span class="hljs-comment">#   2. If there has the phones not in the dictionary, what it will be recognized as &#x27;SIL&#x27;</span><br><span class="hljs-comment">#   3. the temp files</span><br><span class="hljs-comment">#   4. F.fst</span><br><br><br>utils/prepare_lang.sh ./local/dict <span class="hljs-string">&#x27;SIL&#x27;</span> ./temp/01/ L/lang<br><br><br><br><br></code></pre></td></tr></table></figure><h1 id="Visualize-the-fst-file"><a href="#Visualize-the-fst-file" class="headerlink" title="Visualize the .fst file"></a>Visualize the .fst file</h1><p>we can print the .fst here to see the whole results.</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs Bash">fstprint ../lang/L.fst<br></code></pre></td></tr></table></figure><p>Save the log of the L.fst into L.txt.</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs Bash">fstprint ../lang/L.fst &gt; L.txt<br></code></pre></td></tr></table></figure><p>After we generated the L.fst, we can get the estimation from there. All the phones and words will get an ID. </p><p>  phone_ID   word_ID     input: phone    output: word    probabilities<br>    0           1            <eps>            <eps>         0.6878887788<br>    1           2            EY1_S                A           0.7987897897<br>  …..<br>Here are the .fst format: </eps></eps></p><p>We can use fstdraw to draw the decoding graph.</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs Bash">fstdraw --isymbols=../lang/phones.txt --osymbols=../lang/words.txt ../lang/L.fst  &gt; L.dot<br></code></pre></td></tr></table></figure><p>We can firstly output a L.dot file then we can just draw it. So we can use .dot file to generate it into a jpg file.</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs Bash">apt wget install ghostscript<br>apt wget install graphviz<br>dot -Tjpg L.dot &gt; L.jpg<br></code></pre></td></tr></table></figure><p>###3. C.fst （Context） In here, means the phones can be affected by the phones next to it<br>Input phones and output phones. </p><p>###4. G.fst : just n-gram  get_lm.sh<br>we can download srilm. </p><p>Language model is very easy, we just need to prepare the corpus line by line and make sure cutted the sentences.</p><p>G.fst actually is G.fsa, fsa is a very typical kind of fst, it is a kind of reciever, which inputs equals to output.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs Python"><span class="hljs-comment"># the name can be set as: text.lm</span><br><br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br><span class="hljs-string"></span><br><span class="hljs-string">[word1, word2, word3, ..., wordn]</span><br><span class="hljs-string">[&#x27;I, Love, Kaldi&#x27;]</span><br><span class="hljs-string">[&#x27;Me, too&#x27;]</span><br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br><br></code></pre></td></tr></table></figure><p>Here we just introduce UNIX way to do it. We will use awk. </p><p>Awk is very fast then python, if there is efficiency needs.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs Python"><br><span class="hljs-comment"># get the corpus input we need to process </span><br>file_name = <span class="hljs-string">&#x27;/root/data/.../...&#x27;</span> <br><br><span class="hljs-comment"># read the file</span><br><span class="hljs-keyword">with</span> <span class="hljs-built_in">open</span>(file_name, <span class="hljs-string">&#x27;r&#x27;</span>, encoding = <span class="hljs-string">&#x27;utf-8&#x27;</span>) <span class="hljs-keyword">as</span> file:<br><span class="hljs-keyword">for</span> item <span class="hljs-keyword">in</span> file.readlines():<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot; &quot;</span>.join(item.strip(<span class="hljs-string">&quot;\n&quot;</span>)strip().split(<span class="hljs-string">&quot; &quot;</span>)[<span class="hljs-number">1</span>:]))<br><span class="hljs-keyword">pass</span><br><span class="hljs-keyword">pass</span><br><br><br><br><span class="hljs-comment"># we can just get [word1, word2, word3, ..., wordn]</span><br></code></pre></td></tr></table></figure><p>We will use the AWK to do the same thing.</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs Bash"><span class="hljs-comment"># here are the original idea</span><br><span class="hljs-comment">#[AUDIOSPK1001 &#x27;I, Love, Kaldi&#x27;]</span><br><span class="hljs-comment">#[AUDIOSPK1001 &#x27;Me, too&#x27;]</span><br><span class="hljs-comment"># we can just firstly test it with print in awk</span><br>awk <span class="hljs-string">&#x27;&#123;print $1&#125;&#x27;</span> text <span class="hljs-comment"># here &quot;text&quot; means the txt file you want to manipulate, her is $1 means we print the first colum. It will look like:</span><br><span class="hljs-comment"># AUDIOSPK1001</span><br><span class="hljs-comment"># AUDIOSPK1002</span><br><br><span class="hljs-comment"># If is $0, which means the whole. $2 means the second column. $4 is the fourth column.</span><br></code></pre></td></tr></table></figure><p>Here we need to get the column that except the first column.</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs Bash"><br>awk <span class="hljs-string">&#x27;&#123;for(i=2; i&lt;NF; i++) printf $i &quot;\t&quot;; printf &#x27;</span>\n<span class="hljs-string">&#x27;&#125;&#x27;</span> text <span class="hljs-comment"># here the \t is just like \n,  we can delete it as well. the default diving symbol is &#x27; &#x27;, in here actually awk -F &#x27; &#x27;&#x27;&#123;for(i=2; i&lt;NF; i++) printf $i &quot;\t&quot;; printf &#x27;\n&#x27;&#125;&#x27; text. NF is the last column, awk is based on column manipulations. </span><br><br>awk <span class="hljs-string">&#x27;&#123;for(i=2; i&lt;NF; i++) printf $i &quot;&quot;; printf &#x27;</span>\n<span class="hljs-string">&#x27;&#125;&#x27;</span> text<br><span class="hljs-comment"># we will get exactly the same output just like python, but much faster:</span><br><span class="hljs-comment"># word1, word2, word3, ..., wordn</span><br><span class="hljs-comment"># I, Love, Kaldi</span><br><span class="hljs-comment"># Me, too</span><br></code></pre></td></tr></table></figure><h3 id="write-get-lm-sh-we-need-to-write-aw-shell-script-to-run-and-get-th-lm-language-model"><a href="#write-get-lm-sh-we-need-to-write-aw-shell-script-to-run-and-get-th-lm-language-model" class="headerlink" title="write get_lm.sh (we need to write aw shell script to run and get th lm(language model))"></a>write get_lm.sh (we need to write aw shell script to run and get th lm(language model))</h3><p>n-gram language model is statistical language model, more traning data can be more “better” in some ways. </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><code class="hljs Bash"><span class="hljs-comment"># You need firstly specify your corpus sources.</span><br>text = <span class="hljs-string">&quot;./text.lm&quot;</span><br><span class="hljs-comment"># 1. get all the corpus</span><br><span class="hljs-comment"># awk &#x27;&#123;for(i=2; i&lt;NF; i++) printf $i &quot;&quot;; printf &#x27;\n&#x27;&#125;&#x27; text &gt; xxx.lm</span><br><span class="hljs-comment"># loop all the columns:</span><br><span class="hljs-comment">#NF here means the last column</span><br><span class="hljs-comment">#   printf just like C language, they are the same in some ways</span><br><span class="hljs-comment"># 2. Deploy Trigram n-gram model</span><br>ngram-count -text text.lm -order 3 write train.part.txt.count  <br><span class="hljs-comment"># OR we can use</span><br>ngram-count -text <span class="hljs-variable">$text</span> -order 3 write train.part.txt.count  <br><span class="hljs-comment"># $text means the file itself, we already defined it at first.</span><br><span class="hljs-comment"># -text: the corpus</span><br><span class="hljs-comment"># wirte: write the file</span><br><span class="hljs-comment"># here 3 means tri, which indicates triphone, and write into train.part.txt.count file.</span><br><span class="hljs-comment"># here are the preview</span><br><br><span class="hljs-comment">#   word  pairs         times</span><br><span class="hljs-comment">#      I                  10</span><br><span class="hljs-comment">#    I  Love              5</span><br><span class="hljs-comment">#  I  Love Kaldi          1</span><br><span class="hljs-comment">#  Hello World &lt;/s&gt;       2</span><br><span class="hljs-comment">#  &lt;/s&gt; is great          1</span><br><span class="hljs-comment"># &lt;/s&gt; means the starting or ending point, usually means something will begin or end from there.  </span><br><br><span class="hljs-comment"># 3. From the 2nd step,  generateing the lm</span><br>ngram-count -<span class="hljs-built_in">read</span> train.part.txt.count -order 3 -lm LM -interpole -kndiscount<br><span class="hljs-comment">#  -lm which means the generated Language Model, right now we call it LM</span><br><span class="hljs-comment"># -interpole is the smoothing function, and kndiscount is the callback function.There are two possibilities, one is the original and other which is callback function.</span><br><span class="hljs-comment">#  \data\</span><br><span class="hljs-comment"># ngram 1 = 2821      , here means there are 2821 1grams&#x27; pairs</span><br><span class="hljs-comment"># ngram 2 = 6344</span><br><span class="hljs-comment"># ngram 3 = 444</span><br><span class="hljs-comment"># \1-grams:</span><br><span class="hljs-comment"># -3.4234324     1       -0.034523532 this is also probabities but with log(), we call backoff method</span><br><span class="hljs-comment"># -3.4234224     2       -0.032323532</span><br><span class="hljs-comment"># -2.3234224     A       -0.023233532</span><br><span class="hljs-comment"># \2-grams:</span><br><span class="hljs-comment"># -3.2424432     I  Love          -0.232312332</span><br><span class="hljs-comment"># \3-grams:</span><br><span class="hljs-comment"># -4.3244343     I  Love Kaldi    -0.454554545</span><br><br></code></pre></td></tr></table></figure><h2 id="Generate-G-fst"><a href="#Generate-G-fst" class="headerlink" title="Generate G.fst"></a>Generate G.fst</h2><p>There has two ways to generate G.fst.</p><h3 id="Way1-Just-Call-from-the-Kaldi-shell"><a href="#Way1-Just-Call-from-the-Kaldi-shell" class="headerlink" title="Way1: Just Call from the Kaldi shell"></a>Way1: Just Call from the Kaldi shell</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs Bash">utils/format_lm_sri.sh data/lang /lm/LM /data/local/dict/lexicon.txt/data/lang_test<br></code></pre></td></tr></table></figure><h3 id="Way2-using-arpa2fst"><a href="#Way2-using-arpa2fst" class="headerlink" title="Way2: using arpa2fst"></a>Way2: using arpa2fst</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs Bash">arpa2fst --disambig-symbol=<span class="hljs-comment">#0 --read-symbol-table=/data/lang/words.txt /lm/LM/G.fst</span><br></code></pre></td></tr></table></figure><p><a href="https://speech.zone/">https://speech.zone/</a></p><h1 id="UNIX-Shell-Cmds"><a href="#UNIX-Shell-Cmds" class="headerlink" title="UNIX Shell Cmds"></a>UNIX Shell Cmds</h1><p>cp  -r S0252&#x2F;S0252_mic&#x2F;* .&#x2F;S0150&#x2F;S0150_mic&#x2F;</p><p>Copy all the data from the “S0252&#x2F;S0252_mic&#x2F;“ directory to “&#x2F;S0150&#x2F;S0150_mic&#x2F;“ directory. “-r” means copy directly without any warnings.</p><p>du -sh<br>Check the size of the directory.</p><p>du -h –max-depth&#x3D;1 &#x2F;.<br>Check all the directory size under the current directory.</p><p>ls | wc -l<br>Check how many files in one directory</p><p>rm -rf .&#x2F;<br>Delete the current directory.  No warrning will occur.</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs Bash"><span class="hljs-built_in">cat</span> ./.../*.txt<br></code></pre></td></tr></table></figure><p>Print all the .txt files in that directory.</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs Bash"><span class="hljs-built_in">cat</span> ./.../*.txt &gt; ./text<br></code></pre></td></tr></table></figure><p>Print all the .txt file’s content in that text file</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs Bash">python3 ./.../..py &gt; ./text<br></code></pre></td></tr></table></figure><p>print the .py running results on text file.</p><p>file .wav :<br>Check the identity of the wav file size</p><p>Use mv to change the file name:<br>mv .&#x2F;..&#x2F;..&#x2F;.py .&#x2F;..&#x2F;..&#x2F;.py<br>We can use remove to change the file’s name.</p><p>which …<br>Check where … is, the location of …</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs Bash">ll -lh<br></code></pre></td></tr></table></figure><p>check all the files’ size</p><p>Vim:<br>To the top: GG<br>To the bottom: gg<br>vim name+tab : auto-type the name<br>auto sort: “:sort”<br>:set number: check how many lines<br>dd: delete one line</p><p>search the “keyword”<br>&#x2F;“keyword”</p><p>#other notes<br>The liux and windows files are not totally exchangeable, especially when we operate the .txt files on those two different kinds of machines.</p><p>especially we can see some codes shows the dissimilarities like: <feff>.</feff></p><p>we can use dos2unix tool to do the convertion:<br>After we did wget install dos2unix, then we can just do:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs Bash">dos2unix the_file_I_want_do_conversion.txt<br></code></pre></td></tr></table></figure><hr><p>title: kaldi notes<br>date: 2022-03-11 21:48:12<br>tags:</p><hr>]]></content>
    
    
    
  </entry>
  
  
  
  
</search>
